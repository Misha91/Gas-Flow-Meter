
FM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000072a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000032  00800060  0000072a  000007be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800092  00800092  000007f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000820  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  0000085c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cc3  00000000  00000000  000008ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000062e  00000000  00000000  000015af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000752  00000000  00000000  00001bdd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000224  00000000  00000000  00002330  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000541  00000000  00000000  00002554  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000780  00000000  00000000  00002a95  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00003215  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	24 c1       	rjmp	.+584    	; 0x24a <__ctors_end>
   2:	48 c3       	rjmp	.+1680   	; 0x694 <__vector_1>
   4:	21 c3       	rjmp	.+1602   	; 0x648 <__vector_2>
   6:	3a c1       	rjmp	.+628    	; 0x27c <__bad_interrupt>
   8:	36 c3       	rjmp	.+1644   	; 0x676 <__vector_4>
   a:	38 c1       	rjmp	.+624    	; 0x27c <__bad_interrupt>
   c:	b5 c2       	rjmp	.+1386   	; 0x578 <__vector_6>
   e:	36 c1       	rjmp	.+620    	; 0x27c <__bad_interrupt>
  10:	35 c1       	rjmp	.+618    	; 0x27c <__bad_interrupt>
  12:	34 c1       	rjmp	.+616    	; 0x27c <__bad_interrupt>
  14:	33 c1       	rjmp	.+614    	; 0x27c <__bad_interrupt>
  16:	32 c1       	rjmp	.+612    	; 0x27c <__bad_interrupt>
  18:	31 c1       	rjmp	.+610    	; 0x27c <__bad_interrupt>
  1a:	30 c1       	rjmp	.+608    	; 0x27c <__bad_interrupt>
  1c:	2f c1       	rjmp	.+606    	; 0x27c <__bad_interrupt>
  1e:	2e c1       	rjmp	.+604    	; 0x27c <__bad_interrupt>
  20:	2d c1       	rjmp	.+602    	; 0x27c <__bad_interrupt>

00000022 <__trampolines_end>:
	...
  2a:	00 2f       	mov	r16, r16
  2c:	00 00       	nop
  2e:	00 00       	nop
  30:	07 00       	.word	0x0007	; ????
  32:	07 00       	.word	0x0007	; ????
  34:	00 14       	cp	r0, r0
  36:	7f 14       	cp	r7, r15
  38:	7f 14       	cp	r7, r15
  3a:	00 24       	eor	r0, r0
  3c:	2a 7f       	andi	r18, 0xFA	; 250
  3e:	2a 12       	cpse	r2, r26
  40:	00 62       	ori	r16, 0x20	; 32
  42:	64 08       	sbc	r6, r4
  44:	13 23       	and	r17, r19
  46:	00 36       	cpi	r16, 0x60	; 96
  48:	49 55       	subi	r20, 0x59	; 89
  4a:	22 50       	subi	r18, 0x02	; 2
  4c:	00 00       	nop
  4e:	05 03       	mulsu	r16, r21
  50:	00 00       	nop
  52:	00 00       	nop
  54:	1c 22       	and	r1, r28
  56:	41 00       	.word	0x0041	; ????
  58:	00 00       	nop
  5a:	41 22       	and	r4, r17
  5c:	1c 00       	.word	0x001c	; ????
  5e:	00 14       	cp	r0, r0
  60:	08 3e       	cpi	r16, 0xE8	; 232
  62:	08 14       	cp	r0, r8
  64:	00 08       	sbc	r0, r0
  66:	08 3e       	cpi	r16, 0xE8	; 232
  68:	08 08       	sbc	r0, r8
  6a:	00 00       	nop
  6c:	00 a0       	ldd	r0, Z+32	; 0x20
  6e:	60 00       	.word	0x0060	; ????
  70:	00 08       	sbc	r0, r0
  72:	08 08       	sbc	r0, r8
  74:	08 08       	sbc	r0, r8
  76:	00 00       	nop
  78:	60 60       	ori	r22, 0x00	; 0
  7a:	00 00       	nop
  7c:	00 20       	and	r0, r0
  7e:	10 08       	sbc	r1, r0
  80:	04 02       	muls	r16, r20
  82:	00 3e       	cpi	r16, 0xE0	; 224
  84:	51 49       	sbci	r21, 0x91	; 145
  86:	45 3e       	cpi	r20, 0xE5	; 229
  88:	00 00       	nop
  8a:	42 7f       	andi	r20, 0xF2	; 242
  8c:	40 00       	.word	0x0040	; ????
  8e:	00 42       	sbci	r16, 0x20	; 32
  90:	61 51       	subi	r22, 0x11	; 17
  92:	49 46       	sbci	r20, 0x69	; 105
  94:	00 21       	and	r16, r0
  96:	41 45       	sbci	r20, 0x51	; 81
  98:	4b 31       	cpi	r20, 0x1B	; 27
  9a:	00 18       	sub	r0, r0
  9c:	14 12       	cpse	r1, r20
  9e:	7f 10       	cpse	r7, r15
  a0:	00 27       	eor	r16, r16
  a2:	45 45       	sbci	r20, 0x55	; 85
  a4:	45 39       	cpi	r20, 0x95	; 149
  a6:	00 3c       	cpi	r16, 0xC0	; 192
  a8:	4a 49       	sbci	r20, 0x9A	; 154
  aa:	49 30       	cpi	r20, 0x09	; 9
  ac:	00 01       	movw	r0, r0
  ae:	71 09       	sbc	r23, r1
  b0:	05 03       	mulsu	r16, r21
  b2:	00 36       	cpi	r16, 0x60	; 96
  b4:	49 49       	sbci	r20, 0x99	; 153
  b6:	49 36       	cpi	r20, 0x69	; 105
  b8:	00 06       	cpc	r0, r16
  ba:	49 49       	sbci	r20, 0x99	; 153
  bc:	29 1e       	adc	r2, r25
  be:	00 00       	nop
  c0:	36 36       	cpi	r19, 0x66	; 102
  c2:	00 00       	nop
  c4:	00 00       	nop
  c6:	56 36       	cpi	r21, 0x66	; 102
  c8:	00 00       	nop
  ca:	00 08       	sbc	r0, r0
  cc:	14 22       	and	r1, r20
  ce:	41 00       	.word	0x0041	; ????
  d0:	00 14       	cp	r0, r0
  d2:	14 14       	cp	r1, r4
  d4:	14 14       	cp	r1, r4
  d6:	00 00       	nop
  d8:	41 22       	and	r4, r17
  da:	14 08       	sbc	r1, r4
  dc:	00 02       	muls	r16, r16
  de:	01 51       	subi	r16, 0x11	; 17
  e0:	09 06       	cpc	r0, r25
  e2:	00 32       	cpi	r16, 0x20	; 32
  e4:	49 59       	subi	r20, 0x99	; 153
  e6:	51 3e       	cpi	r21, 0xE1	; 225
  e8:	00 7c       	andi	r16, 0xC0	; 192
  ea:	12 11       	cpse	r17, r2
  ec:	12 7c       	andi	r17, 0xC2	; 194
  ee:	00 7f       	andi	r16, 0xF0	; 240
  f0:	49 49       	sbci	r20, 0x99	; 153
  f2:	49 36       	cpi	r20, 0x69	; 105
  f4:	00 3e       	cpi	r16, 0xE0	; 224
  f6:	41 41       	sbci	r20, 0x11	; 17
  f8:	41 22       	and	r4, r17
  fa:	00 7f       	andi	r16, 0xF0	; 240
  fc:	41 41       	sbci	r20, 0x11	; 17
  fe:	22 1c       	adc	r2, r2
 100:	00 7f       	andi	r16, 0xF0	; 240
 102:	49 49       	sbci	r20, 0x99	; 153
 104:	49 41       	sbci	r20, 0x19	; 25
 106:	00 7f       	andi	r16, 0xF0	; 240
 108:	09 09       	sbc	r16, r9
 10a:	09 01       	movw	r0, r18
 10c:	00 3e       	cpi	r16, 0xE0	; 224
 10e:	41 49       	sbci	r20, 0x91	; 145
 110:	49 7a       	andi	r20, 0xA9	; 169
 112:	00 7f       	andi	r16, 0xF0	; 240
 114:	08 08       	sbc	r0, r8
 116:	08 7f       	andi	r16, 0xF8	; 248
 118:	00 00       	nop
 11a:	41 7f       	andi	r20, 0xF1	; 241
 11c:	41 00       	.word	0x0041	; ????
 11e:	00 20       	and	r0, r0
 120:	40 41       	sbci	r20, 0x10	; 16
 122:	3f 01       	movw	r6, r30
 124:	00 7f       	andi	r16, 0xF0	; 240
 126:	08 14       	cp	r0, r8
 128:	22 41       	sbci	r18, 0x12	; 18
 12a:	00 7f       	andi	r16, 0xF0	; 240
 12c:	40 40       	sbci	r20, 0x00	; 0
 12e:	40 40       	sbci	r20, 0x00	; 0
 130:	00 7f       	andi	r16, 0xF0	; 240
 132:	02 0c       	add	r0, r2
 134:	02 7f       	andi	r16, 0xF2	; 242
 136:	00 7f       	andi	r16, 0xF0	; 240
 138:	04 08       	sbc	r0, r4
 13a:	10 7f       	andi	r17, 0xF0	; 240
 13c:	00 3e       	cpi	r16, 0xE0	; 224
 13e:	41 41       	sbci	r20, 0x11	; 17
 140:	41 3e       	cpi	r20, 0xE1	; 225
 142:	00 7f       	andi	r16, 0xF0	; 240
 144:	09 09       	sbc	r16, r9
 146:	09 06       	cpc	r0, r25
 148:	00 3e       	cpi	r16, 0xE0	; 224
 14a:	41 51       	subi	r20, 0x11	; 17
 14c:	21 5e       	subi	r18, 0xE1	; 225
 14e:	00 7f       	andi	r16, 0xF0	; 240
 150:	09 19       	sub	r16, r9
 152:	29 46       	sbci	r18, 0x69	; 105
 154:	00 46       	sbci	r16, 0x60	; 96
 156:	49 49       	sbci	r20, 0x99	; 153
 158:	49 31       	cpi	r20, 0x19	; 25
 15a:	00 01       	movw	r0, r0
 15c:	01 7f       	andi	r16, 0xF1	; 241
 15e:	01 01       	movw	r0, r2
 160:	00 3f       	cpi	r16, 0xF0	; 240
 162:	40 40       	sbci	r20, 0x00	; 0
 164:	40 3f       	cpi	r20, 0xF0	; 240
 166:	00 1f       	adc	r16, r16
 168:	20 40       	sbci	r18, 0x00	; 0
 16a:	20 1f       	adc	r18, r16
 16c:	00 3f       	cpi	r16, 0xF0	; 240
 16e:	40 38       	cpi	r20, 0x80	; 128
 170:	40 3f       	cpi	r20, 0xF0	; 240
 172:	00 63       	ori	r16, 0x30	; 48
 174:	14 08       	sbc	r1, r4
 176:	14 63       	ori	r17, 0x34	; 52
 178:	00 07       	cpc	r16, r16
 17a:	08 70       	andi	r16, 0x08	; 8
 17c:	08 07       	cpc	r16, r24
 17e:	00 61       	ori	r16, 0x10	; 16
 180:	51 49       	sbci	r21, 0x91	; 145
 182:	45 43       	sbci	r20, 0x35	; 53
 184:	00 00       	nop
 186:	7f 41       	sbci	r23, 0x1F	; 31
 188:	41 00       	.word	0x0041	; ????
 18a:	00 55       	subi	r16, 0x50	; 80
 18c:	2a 55       	subi	r18, 0x5A	; 90
 18e:	2a 55       	subi	r18, 0x5A	; 90
 190:	00 00       	nop
 192:	41 41       	sbci	r20, 0x11	; 17
 194:	7f 00       	.word	0x007f	; ????
 196:	00 04       	cpc	r0, r0
 198:	02 01       	movw	r0, r4
 19a:	02 04       	cpc	r0, r2
 19c:	00 40       	sbci	r16, 0x00	; 0
 19e:	40 40       	sbci	r20, 0x00	; 0
 1a0:	40 40       	sbci	r20, 0x00	; 0
 1a2:	00 00       	nop
 1a4:	01 02       	muls	r16, r17
 1a6:	04 00       	.word	0x0004	; ????
 1a8:	00 20       	and	r0, r0
 1aa:	54 54       	subi	r21, 0x44	; 68
 1ac:	54 78       	andi	r21, 0x84	; 132
 1ae:	00 7f       	andi	r16, 0xF0	; 240
 1b0:	48 44       	sbci	r20, 0x48	; 72
 1b2:	44 38       	cpi	r20, 0x84	; 132
 1b4:	00 38       	cpi	r16, 0x80	; 128
 1b6:	44 44       	sbci	r20, 0x44	; 68
 1b8:	44 20       	and	r4, r4
 1ba:	00 38       	cpi	r16, 0x80	; 128
 1bc:	44 44       	sbci	r20, 0x44	; 68
 1be:	48 7f       	andi	r20, 0xF8	; 248
 1c0:	00 38       	cpi	r16, 0x80	; 128
 1c2:	54 54       	subi	r21, 0x44	; 68
 1c4:	54 18       	sub	r5, r4
 1c6:	00 08       	sbc	r0, r0
 1c8:	7e 09       	sbc	r23, r14
 1ca:	01 02       	muls	r16, r17
 1cc:	00 18       	sub	r0, r0
 1ce:	a4 a4       	ldd	r10, Z+44	; 0x2c
 1d0:	a4 7c       	andi	r26, 0xC4	; 196
 1d2:	00 7f       	andi	r16, 0xF0	; 240
 1d4:	08 04       	cpc	r0, r8
 1d6:	04 78       	andi	r16, 0x84	; 132
 1d8:	00 00       	nop
 1da:	44 7d       	andi	r20, 0xD4	; 212
 1dc:	40 00       	.word	0x0040	; ????
 1de:	00 40       	sbci	r16, 0x00	; 0
 1e0:	80 84       	ldd	r8, Z+8	; 0x08
 1e2:	7d 00       	.word	0x007d	; ????
 1e4:	00 7f       	andi	r16, 0xF0	; 240
 1e6:	10 28       	or	r1, r0
 1e8:	44 00       	.word	0x0044	; ????
 1ea:	00 00       	nop
 1ec:	41 7f       	andi	r20, 0xF1	; 241
 1ee:	40 00       	.word	0x0040	; ????
 1f0:	00 7c       	andi	r16, 0xC0	; 192
 1f2:	04 18       	sub	r0, r4
 1f4:	04 78       	andi	r16, 0x84	; 132
 1f6:	00 7c       	andi	r16, 0xC0	; 192
 1f8:	08 04       	cpc	r0, r8
 1fa:	04 78       	andi	r16, 0x84	; 132
 1fc:	00 38       	cpi	r16, 0x80	; 128
 1fe:	44 44       	sbci	r20, 0x44	; 68
 200:	44 38       	cpi	r20, 0x84	; 132
 202:	00 fc       	sbrc	r0, 0
 204:	24 24       	eor	r2, r4
 206:	24 18       	sub	r2, r4
 208:	00 18       	sub	r0, r0
 20a:	24 24       	eor	r2, r4
 20c:	18 fc       	.word	0xfc18	; ????
 20e:	00 7c       	andi	r16, 0xC0	; 192
 210:	08 04       	cpc	r0, r8
 212:	04 08       	sbc	r0, r4
 214:	00 48       	sbci	r16, 0x80	; 128
 216:	54 54       	subi	r21, 0x44	; 68
 218:	54 20       	and	r5, r4
 21a:	00 04       	cpc	r0, r0
 21c:	3f 44       	sbci	r19, 0x4F	; 79
 21e:	40 20       	and	r4, r0
 220:	00 3c       	cpi	r16, 0xC0	; 192
 222:	40 40       	sbci	r20, 0x00	; 0
 224:	20 7c       	andi	r18, 0xC0	; 192
 226:	00 1c       	adc	r0, r0
 228:	20 40       	sbci	r18, 0x00	; 0
 22a:	20 1c       	adc	r2, r0
 22c:	00 3c       	cpi	r16, 0xC0	; 192
 22e:	40 30       	cpi	r20, 0x00	; 0
 230:	40 3c       	cpi	r20, 0xC0	; 192
 232:	00 44       	sbci	r16, 0x40	; 64
 234:	28 10       	cpse	r2, r8
 236:	28 44       	sbci	r18, 0x48	; 72
 238:	00 1c       	adc	r0, r0
 23a:	a0 a0       	ldd	r10, Z+32	; 0x20
 23c:	a0 7c       	andi	r26, 0xC0	; 192
 23e:	00 44       	sbci	r16, 0x40	; 64
 240:	64 54       	subi	r22, 0x44	; 68
 242:	4c 44       	sbci	r20, 0x4C	; 76
 244:	14 14       	cp	r1, r4
 246:	14 14       	cp	r1, r4
 248:	14 14       	cp	r1, r4

0000024a <__ctors_end>:
 24a:	11 24       	eor	r1, r1
 24c:	1f be       	out	0x3f, r1	; 63
 24e:	cf ed       	ldi	r28, 0xDF	; 223
 250:	cd bf       	out	0x3d, r28	; 61

00000252 <__do_copy_data>:
 252:	10 e0       	ldi	r17, 0x00	; 0
 254:	a0 e6       	ldi	r26, 0x60	; 96
 256:	b0 e0       	ldi	r27, 0x00	; 0
 258:	ea e2       	ldi	r30, 0x2A	; 42
 25a:	f7 e0       	ldi	r31, 0x07	; 7
 25c:	02 c0       	rjmp	.+4      	; 0x262 <__do_copy_data+0x10>
 25e:	05 90       	lpm	r0, Z+
 260:	0d 92       	st	X+, r0
 262:	a2 39       	cpi	r26, 0x92	; 146
 264:	b1 07       	cpc	r27, r17
 266:	d9 f7       	brne	.-10     	; 0x25e <__do_copy_data+0xc>

00000268 <__do_clear_bss>:
 268:	20 e0       	ldi	r18, 0x00	; 0
 26a:	a2 e9       	ldi	r26, 0x92	; 146
 26c:	b0 e0       	ldi	r27, 0x00	; 0
 26e:	01 c0       	rjmp	.+2      	; 0x272 <.do_clear_bss_start>

00000270 <.do_clear_bss_loop>:
 270:	1d 92       	st	X+, r1

00000272 <.do_clear_bss_start>:
 272:	a9 39       	cpi	r26, 0x99	; 153
 274:	b2 07       	cpc	r27, r18
 276:	e1 f7       	brne	.-8      	; 0x270 <.do_clear_bss_loop>
 278:	5a d1       	rcall	.+692    	; 0x52e <main>
 27a:	55 c2       	rjmp	.+1194   	; 0x726 <_exit>

0000027c <__bad_interrupt>:
 27c:	c1 ce       	rjmp	.-638    	; 0x0 <__vectors>

0000027e <_Z14LCD_write_bytehh>:
 
void LCD_write_byte(unsigned char dat, unsigned char command)
{
 unsigned char i;
 
 if (command == 1)
 27e:	61 30       	cpi	r22, 0x01	; 1
 280:	11 f4       	brne	.+4      	; 0x286 <_Z14LCD_write_bytehh+0x8>
 LCD_DC_clr;
 282:	dc 98       	cbi	0x1b, 4	; 27
 284:	0d c0       	rjmp	.+26     	; 0x2a0 <_Z14LCD_write_bytehh+0x22>
 else
 LCD_DC_set;
 286:	dc 9a       	sbi	0x1b, 4	; 27
 288:	0b c0       	rjmp	.+22     	; 0x2a0 <_Z14LCD_write_bytehh+0x22>
 
 for(i=0;i<8;i++)
 {
  if(dat&0x80)
 28a:	88 23       	and	r24, r24
 28c:	14 f4       	brge	.+4      	; 0x292 <_Z14LCD_write_bytehh+0x14>
  SDIN_set;
 28e:	dd 9a       	sbi	0x1b, 5	; 27
 290:	01 c0       	rjmp	.+2      	; 0x294 <_Z14LCD_write_bytehh+0x16>
  else
  SDIN_clr;
 292:	dd 98       	cbi	0x1b, 5	; 27
  SCLK_clr;
 294:	de 98       	cbi	0x1b, 6	; 27
  dat = dat << 1;
 296:	88 0f       	add	r24, r24
  SCLK_set;
 298:	de 9a       	sbi	0x1b, 6	; 27
 29a:	91 50       	subi	r25, 0x01	; 1
 if (command == 1)
 LCD_DC_clr;
 else
 LCD_DC_set;
 
 for(i=0;i<8;i++)
 29c:	b1 f7       	brne	.-20     	; 0x28a <_Z14LCD_write_bytehh+0xc>
 29e:	08 95       	ret
void LCD_write_char(unsigned char c);
void LCD_write_english_string(unsigned char X,unsigned char Y,char *s);
 
 
void LCD_write_byte(unsigned char dat, unsigned char command)
{
 2a0:	98 e0       	ldi	r25, 0x08	; 8
 2a2:	f3 cf       	rjmp	.-26     	; 0x28a <_Z14LCD_write_bytehh+0xc>

000002a4 <_Z9LCD_clearv>:
  
 LCD_clear();             // clear the LCD
}
 
void LCD_clear() 
{
 2a4:	cf 93       	push	r28
 2a6:	df 93       	push	r29
 unsigned int i;
 
 LCD_write_byte(0x0c, 1);
 2a8:	61 e0       	ldi	r22, 0x01	; 1
 2aa:	8c e0       	ldi	r24, 0x0C	; 12
 2ac:	e8 df       	rcall	.-48     	; 0x27e <_Z14LCD_write_bytehh>
 LCD_write_byte(0x80, 1);
 2ae:	61 e0       	ldi	r22, 0x01	; 1
 2b0:	80 e8       	ldi	r24, 0x80	; 128
 2b2:	e5 df       	rcall	.-54     	; 0x27e <_Z14LCD_write_bytehh>
 2b4:	c8 ef       	ldi	r28, 0xF8	; 248
 2b6:	d1 e0       	ldi	r29, 0x01	; 1
 
 for (i=0; i<504; i++)
 {
  LCD_write_byte(0, 0);
 2b8:	60 e0       	ldi	r22, 0x00	; 0
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	e0 df       	rcall	.-64     	; 0x27e <_Z14LCD_write_bytehh>
 2be:	21 97       	sbiw	r28, 0x01	; 1
 unsigned int i;
 
 LCD_write_byte(0x0c, 1);
 LCD_write_byte(0x80, 1);
 
 for (i=0; i<504; i++)
 2c0:	d9 f7       	brne	.-10     	; 0x2b8 <_Z9LCD_clearv+0x14>
 {
  LCD_write_byte(0, 0);
 }
}
 2c2:	df 91       	pop	r29
 2c4:	cf 91       	pop	r28
 2c6:	08 95       	ret

000002c8 <_Z8LCD_initv>:
 }
}
 
void LCD_init() 
{
 DDRA |= (1<<PIN3) | (1<<PIN4) | (1<<PIN5) | (1<<PIN6);
 2c8:	8a b3       	in	r24, 0x1a	; 26
 2ca:	88 67       	ori	r24, 0x78	; 120
 2cc:	8a bb       	out	0x1a, r24	; 26
 LCD_RST_clr;
 2ce:	db 98       	cbi	0x1b, 3	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d0:	85 e0       	ldi	r24, 0x05	; 5
 2d2:	8a 95       	dec	r24
 2d4:	f1 f7       	brne	.-4      	; 0x2d2 <_Z8LCD_initv+0xa>
 2d6:	00 00       	nop
 _delay_us(1);
 LCD_RST_set;
 2d8:	db 9a       	sbi	0x1b, 3	; 27
 2da:	85 e0       	ldi	r24, 0x05	; 5
 2dc:	8a 95       	dec	r24
 2de:	f1 f7       	brne	.-4      	; 0x2dc <_Z8LCD_initv+0x14>
 2e0:	00 00       	nop
 
 _delay_us(1);
 
 LCD_write_byte(0x21, 1); // set LCD mode
 2e2:	61 e0       	ldi	r22, 0x01	; 1
 2e4:	81 e2       	ldi	r24, 0x21	; 33
 2e6:	cb df       	rcall	.-106    	; 0x27e <_Z14LCD_write_bytehh>
// LCD_write_byte(0x13, 1); // 1:48
 LCD_write_byte(0xa1, 1); // Contrast
 2e8:	61 e0       	ldi	r22, 0x01	; 1
 2ea:	81 ea       	ldi	r24, 0xA1	; 161
 2ec:	c8 df       	rcall	.-112    	; 0x27e <_Z14LCD_write_bytehh>
 LCD_write_byte(0x13, 1); // set bias voltage
 2ee:	61 e0       	ldi	r22, 0x01	; 1
 2f0:	83 e1       	ldi	r24, 0x13	; 19
 2f2:	c5 df       	rcall	.-118    	; 0x27e <_Z14LCD_write_bytehh>
 LCD_write_byte(0x04, 1); // temperature correction
 2f4:	61 e0       	ldi	r22, 0x01	; 1
 2f6:	84 e0       	ldi	r24, 0x04	; 4
 2f8:	c2 df       	rcall	.-124    	; 0x27e <_Z14LCD_write_bytehh>

 LCD_write_byte(0x20, 1); // use bias command, vertical
 2fa:	61 e0       	ldi	r22, 0x01	; 1
 2fc:	80 e2       	ldi	r24, 0x20	; 32
 2fe:	bf df       	rcall	.-130    	; 0x27e <_Z14LCD_write_bytehh>
 LCD_write_byte(0x0c, 1); // set LCD mode,display normally
 300:	61 e0       	ldi	r22, 0x01	; 1
 302:	8c e0       	ldi	r24, 0x0C	; 12
 304:	bc df       	rcall	.-136    	; 0x27e <_Z14LCD_write_bytehh>
  
 LCD_clear();             // clear the LCD
 306:	ce df       	rcall	.-100    	; 0x2a4 <_Z9LCD_clearv>
 308:	08 95       	ret

0000030a <_Z10LCD_set_XYhh>:
  LCD_write_byte(0, 0);
 }
}
 
void LCD_set_XY(unsigned char X, unsigned char Y)
{
 30a:	cf 93       	push	r28
 30c:	c8 2f       	mov	r28, r24
 30e:	86 2f       	mov	r24, r22
 LCD_write_byte(0x40 | Y, 1); // column
 310:	61 e0       	ldi	r22, 0x01	; 1
 312:	80 64       	ori	r24, 0x40	; 64
 314:	b4 df       	rcall	.-152    	; 0x27e <_Z14LCD_write_bytehh>
 LCD_write_byte(0x80 | X, 1);    // row
 316:	61 e0       	ldi	r22, 0x01	; 1
 318:	8c 2f       	mov	r24, r28
 31a:	80 68       	ori	r24, 0x80	; 128
 31c:	b0 df       	rcall	.-160    	; 0x27e <_Z14LCD_write_bytehh>
}
 31e:	cf 91       	pop	r28
 320:	08 95       	ret

00000322 <_Z14LCD_write_charh>:
 
void LCD_write_char(unsigned char c)
{
 322:	1f 93       	push	r17
 324:	cf 93       	push	r28
 326:	df 93       	push	r29
 328:	80 52       	subi	r24, 0x20	; 32
 32a:	c8 2f       	mov	r28, r24
 32c:	d0 e0       	ldi	r29, 0x00	; 0
 32e:	c8 0f       	add	r28, r24
 330:	d1 1d       	adc	r29, r1
 332:	c8 0f       	add	r28, r24
 334:	d1 1d       	adc	r29, r1
 336:	cc 0f       	add	r28, r28
 338:	dd 1f       	adc	r29, r29
 33a:	ce 5d       	subi	r28, 0xDE	; 222
 33c:	df 4f       	sbci	r29, 0xFF	; 255
 unsigned char line;
 
 c -= 32;
 
 for (line=0; line<6; line++)
 33e:	10 e0       	ldi	r17, 0x00	; 0
 LCD_write_byte(pgm_read_byte(&(font6x8[c][line])), 0);
 340:	fe 01       	movw	r30, r28
 342:	84 91       	lpm	r24, Z
 344:	60 e0       	ldi	r22, 0x00	; 0
 346:	9b df       	rcall	.-202    	; 0x27e <_Z14LCD_write_bytehh>
{
 unsigned char line;
 
 c -= 32;
 
 for (line=0; line<6; line++)
 348:	1f 5f       	subi	r17, 0xFF	; 255
 34a:	21 96       	adiw	r28, 0x01	; 1
 34c:	16 30       	cpi	r17, 0x06	; 6
 34e:	c1 f7       	brne	.-16     	; 0x340 <_Z14LCD_write_charh+0x1e>
 LCD_write_byte(pgm_read_byte(&(font6x8[c][line])), 0);
 
}
 350:	df 91       	pop	r29
 352:	cf 91       	pop	r28
 354:	1f 91       	pop	r17
 356:	08 95       	ret

00000358 <_Z24LCD_write_english_stringhhPc>:
 
void LCD_write_english_string(unsigned char X,unsigned char Y,char *s)
{
 358:	cf 93       	push	r28
 35a:	df 93       	push	r29
 35c:	ea 01       	movw	r28, r20
 LCD_set_XY(X,Y);
 35e:	d5 df       	rcall	.-86     	; 0x30a <_Z10LCD_set_XYhh>
 while (*s)
 360:	88 81       	ld	r24, Y
 362:	88 23       	and	r24, r24
 364:	29 f0       	breq	.+10     	; 0x370 <_Z24LCD_write_english_stringhhPc+0x18>
 366:	21 96       	adiw	r28, 0x01	; 1
 {
  LCD_write_char(*s);
 368:	dc df       	rcall	.-72     	; 0x322 <_Z14LCD_write_charh>
}
 
void LCD_write_english_string(unsigned char X,unsigned char Y,char *s)
{
 LCD_set_XY(X,Y);
 while (*s)
 36a:	89 91       	ld	r24, Y+
 36c:	81 11       	cpse	r24, r1
 36e:	fc cf       	rjmp	.-8      	; 0x368 <_Z24LCD_write_english_stringhhPc+0x10>
 {
  LCD_write_char(*s);
  s++;
 }
}
 370:	df 91       	pop	r29
 372:	cf 91       	pop	r28
 374:	08 95       	ret

00000376 <_Z10uinttocharPcj>:

// transfering uint16_t into a string


void uinttochar(char* a, uint16_t n)
{
 376:	ef 92       	push	r14
 378:	ff 92       	push	r15
 37a:	0f 93       	push	r16
 37c:	1f 93       	push	r17
 37e:	cf 93       	push	r28
 380:	df 93       	push	r29
 382:	cd b7       	in	r28, 0x3d	; 61
 384:	dd 27       	eor	r29, r29
 386:	c4 51       	subi	r28, 0x14	; 20
 388:	cd bf       	out	0x3d, r28	; 61
 38a:	7c 01       	movw	r14, r24
 38c:	cb 01       	movw	r24, r22

	if (n == 0)
 38e:	00 97       	sbiw	r24, 0x00	; 0
 390:	29 f4       	brne	.+10     	; 0x39c <_Z10uinttocharPcj+0x26>
	{
		*a = '0';
 392:	80 e3       	ldi	r24, 0x30	; 48
 394:	f7 01       	movw	r30, r14
 396:	80 83       	st	Z, r24
		*(a+1) = '\0';
 398:	11 82       	std	Z+1, r1	; 0x01
 39a:	15 c0       	rjmp	.+42     	; 0x3c6 <_Z10uinttocharPcj+0x50>
		return;
	}
	
	char aux[20];
	aux[19] = '\0';
 39c:	1c 8a       	std	Y+20, r1	; 0x14
 39e:	21 e0       	ldi	r18, 0x01	; 1
 3a0:	30 e0       	ldi	r19, 0x00	; 0
 3a2:	fe 01       	movw	r30, r28
 3a4:	74 96       	adiw	r30, 0x14	; 20
	
	int c = 1;
	while (n != 0)
	{
		int mod = n % 10;
		*(--auxp) = mod | 0x30;
 3a6:	0a e0       	ldi	r16, 0x0A	; 10
 3a8:	10 e0       	ldi	r17, 0x00	; 0
 3aa:	b8 01       	movw	r22, r16
 3ac:	9f d1       	rcall	.+830    	; 0x6ec <__udivmodhi4>
 3ae:	80 63       	ori	r24, 0x30	; 48
 3b0:	82 93       	st	-Z, r24
		n /=  10;
 3b2:	86 2f       	mov	r24, r22
 3b4:	97 2f       	mov	r25, r23
		c++;
 3b6:	2f 5f       	subi	r18, 0xFF	; 255
 3b8:	3f 4f       	sbci	r19, 0xFF	; 255
	char aux[20];
	aux[19] = '\0';
	char* auxp = aux + 19;
	
	int c = 1;
	while (n != 0)
 3ba:	00 97       	sbiw	r24, 0x00	; 0
 3bc:	b1 f7       	brne	.-20     	; 0x3aa <_Z10uinttocharPcj+0x34>
		*(--auxp) = mod | 0x30;
		n /=  10;
		c++;
	}
	
	memcpy(a, auxp, c);
 3be:	a9 01       	movw	r20, r18
 3c0:	bf 01       	movw	r22, r30
 3c2:	c7 01       	movw	r24, r14
 3c4:	a7 d1       	rcall	.+846    	; 0x714 <memcpy>

}
 3c6:	cc 5e       	subi	r28, 0xEC	; 236
 3c8:	cd bf       	out	0x3d, r28	; 61
 3ca:	df 91       	pop	r29
 3cc:	cf 91       	pop	r28
 3ce:	1f 91       	pop	r17
 3d0:	0f 91       	pop	r16
 3d2:	ff 90       	pop	r15
 3d4:	ef 90       	pop	r14
 3d6:	08 95       	ret

000003d8 <_Z18everySecondRoutinev>:


void everySecondRoutine(void){
 3d8:	1f 93       	push	r17
 3da:	cf 93       	push	r28
 3dc:	df 93       	push	r29
 3de:	cd b7       	in	r28, 0x3d	; 61
 3e0:	dd 27       	eor	r29, r29
 3e2:	ca 50       	subi	r28, 0x0A	; 10
 3e4:	cd bf       	out	0x3d, r28	; 61
		
		if (count <= 20) count = 0;
 3e6:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <count>
 3ea:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <count+0x1>
 3ee:	45 97       	sbiw	r24, 0x15	; 21
 3f0:	20 f4       	brcc	.+8      	; 0x3fa <_Z18everySecondRoutinev+0x22>
 3f2:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <count+0x1>
 3f6:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <count>
		
		if (count == 0 && idle <= 70) idle++;
 3fa:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <count>
 3fe:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <count+0x1>
 402:	89 2b       	or	r24, r25
 404:	09 f0       	breq	.+2      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 406:	5b c0       	rjmp	.+182    	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
 408:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <idle>
 40c:	87 34       	cpi	r24, 0x47	; 71
 40e:	08 f4       	brcc	.+2      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 410:	50 c0       	rjmp	.+160    	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
 412:	55 c0       	rjmp	.+170    	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
		else if (count != 0) idle = 0;
 414:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <idle>
		
		char buf1[10];
		
		
		uint8_t result = count / 9 + 55;		// 0.1075 * x + 53.05
 418:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <count>
 41c:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <count+0x1>
 420:	69 e0       	ldi	r22, 0x09	; 9
 422:	70 e0       	ldi	r23, 0x00	; 0
 424:	63 d1       	rcall	.+710    	; 0x6ec <__udivmodhi4>
 426:	17 e3       	ldi	r17, 0x37	; 55
 428:	16 0f       	add	r17, r22
		
		//float result = 1;
	//	dtostrf(result, 4, 2, buf1);
		uinttochar(buf1, result);						
 42a:	61 2f       	mov	r22, r17
 42c:	70 e0       	ldi	r23, 0x00	; 0
 42e:	ce 01       	movw	r24, r28
 430:	01 96       	adiw	r24, 0x01	; 1
 432:	a1 df       	rcall	.-190    	; 0x376 <_Z10uinttocharPcj>
		LCD_write_english_string(27, 0, "Flow:");
 434:	40 e6       	ldi	r20, 0x60	; 96
 436:	50 e0       	ldi	r21, 0x00	; 0
 438:	60 e0       	ldi	r22, 0x00	; 0
 43a:	8b e1       	ldi	r24, 0x1B	; 27
 43c:	8d df       	rcall	.-230    	; 0x358 <_Z24LCD_write_english_stringhhPc>
		LCD_write_english_string(35, 2, "     ");
 43e:	45 e8       	ldi	r20, 0x85	; 133
 440:	50 e0       	ldi	r21, 0x00	; 0
 442:	62 e0       	ldi	r22, 0x02	; 2
 444:	83 e2       	ldi	r24, 0x23	; 35
 446:	88 df       	rcall	.-240    	; 0x358 <_Z24LCD_write_english_stringhhPc>
		if (result <= 57) {
 448:	1a 33       	cpi	r17, 0x3A	; 58
 44a:	58 f4       	brcc	.+22     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
			LCD_write_english_string(20, 3, "Too low!");
 44c:	46 e6       	ldi	r20, 0x66	; 102
 44e:	50 e0       	ldi	r21, 0x00	; 0
 450:	63 e0       	ldi	r22, 0x03	; 3
 452:	84 e1       	ldi	r24, 0x14	; 20
 454:	81 df       	rcall	.-254    	; 0x358 <_Z24LCD_write_english_stringhhPc>
			LCD_write_english_string(20, 4, "                    ");
 456:	46 e7       	ldi	r20, 0x76	; 118
 458:	50 e0       	ldi	r21, 0x00	; 0
 45a:	64 e0       	ldi	r22, 0x04	; 4
 45c:	84 e1       	ldi	r24, 0x14	; 20
 45e:	7c df       	rcall	.-264    	; 0x358 <_Z24LCD_write_english_stringhhPc>
 460:	23 c0       	rjmp	.+70     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
		}
		else if (result < 100) {
 462:	14 36       	cpi	r17, 0x64	; 100
 464:	88 f4       	brcc	.+34     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
			LCD_write_english_string(15, 3, "                           ");
 466:	4f e6       	ldi	r20, 0x6F	; 111
 468:	50 e0       	ldi	r21, 0x00	; 0
 46a:	63 e0       	ldi	r22, 0x03	; 3
 46c:	8f e0       	ldi	r24, 0x0F	; 15
 46e:	74 df       	rcall	.-280    	; 0x358 <_Z24LCD_write_english_stringhhPc>
			LCD_write_english_string(35, 3, buf1);
 470:	ae 01       	movw	r20, r28
 472:	4f 5f       	subi	r20, 0xFF	; 255
 474:	5f 4f       	sbci	r21, 0xFF	; 255
 476:	63 e0       	ldi	r22, 0x03	; 3
 478:	83 e2       	ldi	r24, 0x23	; 35
 47a:	6e df       	rcall	.-292    	; 0x358 <_Z24LCD_write_english_stringhhPc>
			LCD_write_english_string(25, 4, "L/min");
 47c:	4b e8       	ldi	r20, 0x8B	; 139
 47e:	50 e0       	ldi	r21, 0x00	; 0
 480:	64 e0       	ldi	r22, 0x04	; 4
 482:	89 e1       	ldi	r24, 0x19	; 25
 484:	69 df       	rcall	.-302    	; 0x358 <_Z24LCD_write_english_stringhhPc>
 486:	10 c0       	rjmp	.+32     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
		}
		
		else {
			LCD_write_english_string(15, 3, "                           ");
 488:	4f e6       	ldi	r20, 0x6F	; 111
 48a:	50 e0       	ldi	r21, 0x00	; 0
 48c:	63 e0       	ldi	r22, 0x03	; 3
 48e:	8f e0       	ldi	r24, 0x0F	; 15
 490:	63 df       	rcall	.-314    	; 0x358 <_Z24LCD_write_english_stringhhPc>
			LCD_write_english_string(31, 3, buf1);
 492:	ae 01       	movw	r20, r28
 494:	4f 5f       	subi	r20, 0xFF	; 255
 496:	5f 4f       	sbci	r21, 0xFF	; 255
 498:	63 e0       	ldi	r22, 0x03	; 3
 49a:	8f e1       	ldi	r24, 0x1F	; 31
 49c:	5d df       	rcall	.-326    	; 0x358 <_Z24LCD_write_english_stringhhPc>
			LCD_write_english_string(25, 4, "L/min");
 49e:	4b e8       	ldi	r20, 0x8B	; 139
 4a0:	50 e0       	ldi	r21, 0x00	; 0
 4a2:	64 e0       	ldi	r22, 0x04	; 4
 4a4:	89 e1       	ldi	r24, 0x19	; 25
 4a6:	58 df       	rcall	.-336    	; 0x358 <_Z24LCD_write_english_stringhhPc>
		}
					
		count = 0;
 4a8:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <count+0x1>
 4ac:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <count>
	
}
 4b0:	0e c0       	rjmp	.+28     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>

void everySecondRoutine(void){
		
		if (count <= 20) count = 0;
		
		if (count == 0 && idle <= 70) idle++;
 4b2:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <idle>
 4b6:	8f 5f       	subi	r24, 0xFF	; 255
 4b8:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <idle>
 4bc:	ad cf       	rjmp	.-166    	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
		else if (count != 0) idle = 0;
 4be:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <count>
 4c2:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <count+0x1>
 4c6:	89 2b       	or	r24, r25
 4c8:	09 f0       	breq	.+2      	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 4ca:	a4 cf       	rjmp	.-184    	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 4cc:	a5 cf       	rjmp	.-182    	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
			LCD_write_english_string(25, 4, "L/min");
		}
					
		count = 0;
	
}
 4ce:	c6 5f       	subi	r28, 0xF6	; 246
 4d0:	cd bf       	out	0x3d, r28	; 61
 4d2:	df 91       	pop	r29
 4d4:	cf 91       	pop	r28
 4d6:	1f 91       	pop	r17
 4d8:	08 95       	ret

000004da <_Z12sleepRoutinev>:

void sleepRoutine(){
	
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 4da:	85 b7       	in	r24, 0x35	; 53
 4dc:	87 7e       	andi	r24, 0xE7	; 231
 4de:	80 61       	ori	r24, 0x10	; 16
 4e0:	85 bf       	out	0x35, r24	; 53
	sleep_enable();
 4e2:	85 b7       	in	r24, 0x35	; 53
 4e4:	80 62       	ori	r24, 0x20	; 32
 4e6:	85 bf       	out	0x35, r24	; 53
	sleep_bod_disable();
 4e8:	85 b7       	in	r24, 0x35	; 53
 4ea:	84 68       	ori	r24, 0x84	; 132
 4ec:	85 bf       	out	0x35, r24	; 53
 4ee:	8b 7f       	andi	r24, 0xFB	; 251
 4f0:	85 bf       	out	0x35, r24	; 53
	
	PORTA &= ~(1 << PINA1); // LED OFF
 4f2:	d9 98       	cbi	0x1b, 1	; 27
	PORTA &= ~(1 << PINA2); // Fan disable
 4f4:	da 98       	cbi	0x1b, 2	; 27
	PORTA &= !(1 << PINA7); // Back light disable
 4f6:	8b b3       	in	r24, 0x1b	; 27
 4f8:	1b ba       	out	0x1b, r1	; 27
	
	LCD_RST_clr; // LCD off
 4fa:	db 98       	cbi	0x1b, 3	; 27
	LCD_DC_clr;
 4fc:	dc 98       	cbi	0x1b, 4	; 27
	SDIN_clr;
 4fe:	dd 98       	cbi	0x1b, 5	; 27
	SCLK_clr;
 500:	de 98       	cbi	0x1b, 6	; 27
	
	TIMSK1 &= ~(1<<OCIE1A); // Timer off
 502:	61 98       	cbi	0x0c, 1	; 12
	
	sei();
 504:	78 94       	sei
	sleep_cpu();
 506:	88 95       	sleep
 508:	08 95       	ret

0000050a <_Z13wakeUpRoutinev>:
}

void wakeUpRoutine(){
	
	sleep_disable();
 50a:	85 b7       	in	r24, 0x35	; 53
 50c:	8f 7d       	andi	r24, 0xDF	; 223
 50e:	85 bf       	out	0x35, r24	; 53
	sec = 0; // reseting ON timer
 510:	10 92 97 00 	sts	0x0097, r1	; 0x800097 <sec>
	PORTA |= 1 << PINA1; // LED ON
 514:	d9 9a       	sbi	0x1b, 1	; 27
	PORTA |= 1 << PINA7; // Back Light ON
 516:	df 9a       	sbi	0x1b, 7	; 27
	
	LCD_init(); // LCD ON
 518:	d7 de       	rcall	.-594    	; 0x2c8 <_Z8LCD_initv>
	TIMSK1 |=  (1<<OCIE1A); // Timer ON
 51a:	61 9a       	sbi	0x0c, 1	; 12
	sec = 0;
 51c:	10 92 97 00 	sts	0x0097, r1	; 0x800097 <sec>
	count = 0;
 520:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <count+0x1>
 524:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <count>
	idle = 0;
 528:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <idle>
 52c:	08 95       	ret

0000052e <main>:
#include "lcd.h"
#include "Services.h"

int main(void)
{
	LCD_init();
 52e:	cc de       	rcall	.-616    	; 0x2c8 <_Z8LCD_initv>
	
	DDRA |= (1 << PINA1) | (1 << PINA2) | (1 << PINA7); // OTPUTs: LED, Fan, LCD back light pins
 530:	8a b3       	in	r24, 0x1a	; 26
 532:	86 68       	ori	r24, 0x86	; 134
 534:	8a bb       	out	0x1a, r24	; 26
	PORTB |= (1 << PINB2); // High reading button
 536:	c2 9a       	sbi	0x18, 2	; 24
	
	// setting 1s timer
	TCCR1B|=( (1<<WGM12)|(1<<CS12) );
 538:	8e b5       	in	r24, 0x2e	; 46
 53a:	8c 60       	ori	r24, 0x0C	; 12
 53c:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 625; // 62500 = 1 sec, 625 = 0,01 sec
 53e:	81 e7       	ldi	r24, 0x71	; 113
 540:	92 e0       	ldi	r25, 0x02	; 2
 542:	9b bd       	out	0x2b, r25	; 43
 544:	8a bd       	out	0x2a, r24	; 42
	TIMSK1 |=  (1<<OCIE1A);
 546:	61 9a       	sbi	0x0c, 1	; 12
	
	MCUCR|= (1 << ISC01) | (1 << ISC00);
 548:	85 b7       	in	r24, 0x35	; 53
 54a:	83 60       	ori	r24, 0x03	; 3
 54c:	85 bf       	out	0x35, r24	; 53
	
	wdt_reset(); // Watch dog reset
 54e:	a8 95       	wdr
				: "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
						_BV(WDE) | (value & 0x07)) )
				: "r0"
		);
 550:	9e e0       	ldi	r25, 0x0E	; 14
 552:	88 e1       	ldi	r24, 0x18	; 24
 554:	0f b6       	in	r0, 0x3f	; 63
 556:	f8 94       	cli
 558:	a8 95       	wdr
 55a:	81 bd       	out	0x21, r24	; 33
 55c:	0f be       	out	0x3f, r0	; 63
 55e:	91 bd       	out	0x21, r25	; 33
	wdt_enable(WDTO_1S); // WD enable with 1s prescaler
	WDTCSR |= (1 << WDIE); // WD interrupt enable
 560:	81 b5       	in	r24, 0x21	; 33
 562:	80 64       	ori	r24, 0x40	; 64
 564:	81 bd       	out	0x21, r24	; 33
	
	sei();
 566:	78 94       	sei
	PCMSK0 |= (1 << PCINT0);
 568:	90 9a       	sbi	0x12, 0	; 18
	GIMSK |= (1 << INT0) | (1 << PCIE0);
 56a:	8b b7       	in	r24, 0x3b	; 59
 56c:	80 65       	ori	r24, 0x50	; 80
 56e:	8b bf       	out	0x3b, r24	; 59
	GIFR |= 1<<PCIF0;
 570:	8a b7       	in	r24, 0x3a	; 58
 572:	80 61       	ori	r24, 0x10	; 16
 574:	8a bf       	out	0x3a, r24	; 58
 576:	ff cf       	rjmp	.-2      	; 0x576 <main+0x48>

00000578 <__vector_6>:
		//PORTA |= 1 << PINA2;	
    }
}

ISR(TIM1_COMPA_vect)
{
 578:	1f 92       	push	r1
 57a:	0f 92       	push	r0
 57c:	0f b6       	in	r0, 0x3f	; 63
 57e:	0f 92       	push	r0
 580:	11 24       	eor	r1, r1
 582:	2f 93       	push	r18
 584:	3f 93       	push	r19
 586:	4f 93       	push	r20
 588:	5f 93       	push	r21
 58a:	6f 93       	push	r22
 58c:	7f 93       	push	r23
 58e:	8f 93       	push	r24
 590:	9f 93       	push	r25
 592:	af 93       	push	r26
 594:	bf 93       	push	r27
 596:	ef 93       	push	r30
 598:	ff 93       	push	r31
	//CPU Jumps here every 1 sec exactly!
	cli();
 59a:	f8 94       	cli
	timerPrescaler++;
 59c:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <timerPrescaler>
 5a0:	8f 5f       	subi	r24, 0xFF	; 255
 5a2:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <timerPrescaler>
		fanOn = 0;
		PORTA &= ~(1 << PINA2);
	}*/
	
	
	if ((timerPrescaler >= 10) && (timerPrescaler < 25) && (count <= 3) && (fanStatus == 0)){
 5a6:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <timerPrescaler>
 5aa:	8a 30       	cpi	r24, 0x0A	; 10
 5ac:	70 f0       	brcs	.+28     	; 0x5ca <__vector_6+0x52>
 5ae:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <timerPrescaler>
 5b2:	89 31       	cpi	r24, 0x19	; 25
 5b4:	50 f4       	brcc	.+20     	; 0x5ca <__vector_6+0x52>
 5b6:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <count>
 5ba:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <count+0x1>
 5be:	04 97       	sbiw	r24, 0x04	; 4
 5c0:	20 f4       	brcc	.+8      	; 0x5ca <__vector_6+0x52>
 5c2:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <fanStatus>
 5c6:	88 23       	and	r24, r24
 5c8:	11 f1       	breq	.+68     	; 0x60e <__vector_6+0x96>
		intChanged = 1;
		fanStatus = 1;
						
	}
	
	if ((timerPrescaler >= 25) && (fanStatus == 1)){
 5ca:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <timerPrescaler>
 5ce:	89 31       	cpi	r24, 0x19	; 25
 5d0:	20 f0       	brcs	.+8      	; 0x5da <__vector_6+0x62>
 5d2:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <fanStatus>
 5d6:	81 30       	cpi	r24, 0x01	; 1
 5d8:	11 f1       	breq	.+68     	; 0x61e <__vector_6+0xa6>
		PORTA &= ~(1 << PINA2);
				
	}
	
		
	if (timerPrescaler >= 99){
 5da:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <timerPrescaler>
 5de:	83 36       	cpi	r24, 0x63	; 99
 5e0:	a0 f0       	brcs	.+40     	; 0x60a <__vector_6+0x92>
		
		if (intChanged == 1){
 5e2:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
 5e6:	81 30       	cpi	r24, 0x01	; 1
 5e8:	19 f4       	brne	.+6      	; 0x5f0 <__vector_6+0x78>
			
			PCMSK0 |= (1 << PCINT0);
 5ea:	90 9a       	sbi	0x12, 0	; 18
			intChanged = 0;
 5ec:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <__data_end>
		}
		
		sec++;
 5f0:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <sec>
 5f4:	8f 5f       	subi	r24, 0xFF	; 255
 5f6:	80 93 97 00 	sts	0x0097, r24	; 0x800097 <sec>
		timerPrescaler = 0;
 5fa:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <timerPrescaler>
		
			
		if (idle >= 60){
 5fe:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <idle>
 602:	8c 33       	cpi	r24, 0x3C	; 60
 604:	08 f0       	brcs	.+2      	; 0x608 <__vector_6+0x90>
			// sleep routine			
			sleepRoutine();				
 606:	69 df       	rcall	.-302    	; 0x4da <_Z12sleepRoutinev>
		}
					
		everySecondRoutine();
 608:	e7 de       	rcall	.-562    	; 0x3d8 <_Z18everySecondRoutinev>
	}
	
	sei();
 60a:	78 94       	sei
}
 60c:	0c c0       	rjmp	.+24     	; 0x626 <__vector_6+0xae>
	}*/
	
	
	if ((timerPrescaler >= 10) && (timerPrescaler < 25) && (count <= 3) && (fanStatus == 0)){
		
		PORTA |= 1 << PINA2;
 60e:	da 9a       	sbi	0x1b, 2	; 27
		PCMSK0 &= ~(1 << PCINT0);
 610:	90 98       	cbi	0x12, 0	; 18
		intChanged = 1;
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <__data_end>
		fanStatus = 1;
 618:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <fanStatus>
 61c:	d6 cf       	rjmp	.-84     	; 0x5ca <__vector_6+0x52>
						
	}
	
	if ((timerPrescaler >= 25) && (fanStatus == 1)){
	
		fanStatus = 0;
 61e:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <fanStatus>
		PORTA &= ~(1 << PINA2);
 622:	da 98       	cbi	0x1b, 2	; 27
 624:	da cf       	rjmp	.-76     	; 0x5da <__vector_6+0x62>
					
		everySecondRoutine();
	}
	
	sei();
}
 626:	ff 91       	pop	r31
 628:	ef 91       	pop	r30
 62a:	bf 91       	pop	r27
 62c:	af 91       	pop	r26
 62e:	9f 91       	pop	r25
 630:	8f 91       	pop	r24
 632:	7f 91       	pop	r23
 634:	6f 91       	pop	r22
 636:	5f 91       	pop	r21
 638:	4f 91       	pop	r20
 63a:	3f 91       	pop	r19
 63c:	2f 91       	pop	r18
 63e:	0f 90       	pop	r0
 640:	0f be       	out	0x3f, r0	; 63
 642:	0f 90       	pop	r0
 644:	1f 90       	pop	r1
 646:	18 95       	reti

00000648 <__vector_2>:

ISR(PCINT0_vect)
{
 648:	1f 92       	push	r1
 64a:	0f 92       	push	r0
 64c:	0f b6       	in	r0, 0x3f	; 63
 64e:	0f 92       	push	r0
 650:	11 24       	eor	r1, r1
 652:	8f 93       	push	r24
 654:	9f 93       	push	r25
	//counts interrupts
	count++;
 656:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <count>
 65a:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <count+0x1>
 65e:	01 96       	adiw	r24, 0x01	; 1
 660:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <count+0x1>
 664:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <count>
	
}
 668:	9f 91       	pop	r25
 66a:	8f 91       	pop	r24
 66c:	0f 90       	pop	r0
 66e:	0f be       	out	0x3f, r0	; 63
 670:	0f 90       	pop	r0
 672:	1f 90       	pop	r1
 674:	18 95       	reti

00000676 <__vector_4>:

ISR (WDT_vect) {
 676:	1f 92       	push	r1
 678:	0f 92       	push	r0
 67a:	0f b6       	in	r0, 0x3f	; 63
 67c:	0f 92       	push	r0
 67e:	11 24       	eor	r1, r1
 680:	8f 93       	push	r24
	
	WDTCSR |= (1 << WDIE); // WD interrupt enable - reseting WD
 682:	81 b5       	in	r24, 0x21	; 33
 684:	80 64       	ori	r24, 0x40	; 64
 686:	81 bd       	out	0x21, r24	; 33
}
 688:	8f 91       	pop	r24
 68a:	0f 90       	pop	r0
 68c:	0f be       	out	0x3f, r0	; 63
 68e:	0f 90       	pop	r0
 690:	1f 90       	pop	r1
 692:	18 95       	reti

00000694 <__vector_1>:


ISR (EXT_INT0_vect){
 694:	1f 92       	push	r1
 696:	0f 92       	push	r0
 698:	0f b6       	in	r0, 0x3f	; 63
 69a:	0f 92       	push	r0
 69c:	11 24       	eor	r1, r1
 69e:	2f 93       	push	r18
 6a0:	3f 93       	push	r19
 6a2:	4f 93       	push	r20
 6a4:	5f 93       	push	r21
 6a6:	6f 93       	push	r22
 6a8:	7f 93       	push	r23
 6aa:	8f 93       	push	r24
 6ac:	9f 93       	push	r25
 6ae:	af 93       	push	r26
 6b0:	bf 93       	push	r27
 6b2:	ef 93       	push	r30
 6b4:	ff 93       	push	r31
	
	cli();
 6b6:	f8 94       	cli
	
	if (MCUCR & (1 << SE)) wakeUpRoutine();
 6b8:	05 b6       	in	r0, 0x35	; 53
 6ba:	05 fe       	sbrs	r0, 5
 6bc:	02 c0       	rjmp	.+4      	; 0x6c2 <__vector_1+0x2e>
 6be:	25 df       	rcall	.-438    	; 0x50a <_Z13wakeUpRoutinev>
 6c0:	03 c0       	rjmp	.+6      	; 0x6c8 <__vector_1+0x34>
	else if (!(MCUCR & (1 << SE))) sleepRoutine();
 6c2:	05 b6       	in	r0, 0x35	; 53
 6c4:	05 fe       	sbrs	r0, 5
 6c6:	09 df       	rcall	.-494    	; 0x4da <_Z12sleepRoutinev>
	
	sei();
 6c8:	78 94       	sei
}
 6ca:	ff 91       	pop	r31
 6cc:	ef 91       	pop	r30
 6ce:	bf 91       	pop	r27
 6d0:	af 91       	pop	r26
 6d2:	9f 91       	pop	r25
 6d4:	8f 91       	pop	r24
 6d6:	7f 91       	pop	r23
 6d8:	6f 91       	pop	r22
 6da:	5f 91       	pop	r21
 6dc:	4f 91       	pop	r20
 6de:	3f 91       	pop	r19
 6e0:	2f 91       	pop	r18
 6e2:	0f 90       	pop	r0
 6e4:	0f be       	out	0x3f, r0	; 63
 6e6:	0f 90       	pop	r0
 6e8:	1f 90       	pop	r1
 6ea:	18 95       	reti

000006ec <__udivmodhi4>:
 6ec:	aa 1b       	sub	r26, r26
 6ee:	bb 1b       	sub	r27, r27
 6f0:	51 e1       	ldi	r21, 0x11	; 17
 6f2:	07 c0       	rjmp	.+14     	; 0x702 <__udivmodhi4_ep>

000006f4 <__udivmodhi4_loop>:
 6f4:	aa 1f       	adc	r26, r26
 6f6:	bb 1f       	adc	r27, r27
 6f8:	a6 17       	cp	r26, r22
 6fa:	b7 07       	cpc	r27, r23
 6fc:	10 f0       	brcs	.+4      	; 0x702 <__udivmodhi4_ep>
 6fe:	a6 1b       	sub	r26, r22
 700:	b7 0b       	sbc	r27, r23

00000702 <__udivmodhi4_ep>:
 702:	88 1f       	adc	r24, r24
 704:	99 1f       	adc	r25, r25
 706:	5a 95       	dec	r21
 708:	a9 f7       	brne	.-22     	; 0x6f4 <__udivmodhi4_loop>
 70a:	80 95       	com	r24
 70c:	90 95       	com	r25
 70e:	bc 01       	movw	r22, r24
 710:	cd 01       	movw	r24, r26
 712:	08 95       	ret

00000714 <memcpy>:
 714:	fb 01       	movw	r30, r22
 716:	dc 01       	movw	r26, r24
 718:	02 c0       	rjmp	.+4      	; 0x71e <memcpy+0xa>
 71a:	01 90       	ld	r0, Z+
 71c:	0d 92       	st	X+, r0
 71e:	41 50       	subi	r20, 0x01	; 1
 720:	50 40       	sbci	r21, 0x00	; 0
 722:	d8 f7       	brcc	.-10     	; 0x71a <memcpy+0x6>
 724:	08 95       	ret

00000726 <_exit>:
 726:	f8 94       	cli

00000728 <__stop_program>:
 728:	ff cf       	rjmp	.-2      	; 0x728 <__stop_program>
