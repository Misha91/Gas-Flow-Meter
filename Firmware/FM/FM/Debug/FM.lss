
FM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000052  00800060  000007aa  0000083e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  008000b2  008000b2  00000890  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000890  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000008fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ee5  00000000  00000000  00000994  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000655  00000000  00000000  00001879  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000698  00000000  00000000  00001ece  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000238  00000000  00000000  00002568  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000560  00000000  00000000  000027a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007cf  00000000  00000000  00002d00  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  000034cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	24 c1       	rjmp	.+584    	; 0x24a <__ctors_end>
   2:	81 c3       	rjmp	.+1794   	; 0x706 <__vector_1>
   4:	5a c3       	rjmp	.+1716   	; 0x6ba <__vector_2>
   6:	3c c1       	rjmp	.+632    	; 0x280 <__bad_interrupt>
   8:	6f c3       	rjmp	.+1758   	; 0x6e8 <__vector_4>
   a:	3a c1       	rjmp	.+628    	; 0x280 <__bad_interrupt>
   c:	15 c3       	rjmp	.+1578   	; 0x638 <__vector_6>
   e:	38 c1       	rjmp	.+624    	; 0x280 <__bad_interrupt>
  10:	37 c1       	rjmp	.+622    	; 0x280 <__bad_interrupt>
  12:	36 c1       	rjmp	.+620    	; 0x280 <__bad_interrupt>
  14:	35 c1       	rjmp	.+618    	; 0x280 <__bad_interrupt>
  16:	34 c1       	rjmp	.+616    	; 0x280 <__bad_interrupt>
  18:	33 c1       	rjmp	.+614    	; 0x280 <__bad_interrupt>
  1a:	32 c1       	rjmp	.+612    	; 0x280 <__bad_interrupt>
  1c:	31 c1       	rjmp	.+610    	; 0x280 <__bad_interrupt>
  1e:	30 c1       	rjmp	.+608    	; 0x280 <__bad_interrupt>
  20:	2f c1       	rjmp	.+606    	; 0x280 <__bad_interrupt>

00000022 <__trampolines_end>:
	...
  2a:	00 2f       	mov	r16, r16
  2c:	00 00       	nop
  2e:	00 00       	nop
  30:	07 00       	.word	0x0007	; ????
  32:	07 00       	.word	0x0007	; ????
  34:	00 14       	cp	r0, r0
  36:	7f 14       	cp	r7, r15
  38:	7f 14       	cp	r7, r15
  3a:	00 24       	eor	r0, r0
  3c:	2a 7f       	andi	r18, 0xFA	; 250
  3e:	2a 12       	cpse	r2, r26
  40:	00 62       	ori	r16, 0x20	; 32
  42:	64 08       	sbc	r6, r4
  44:	13 23       	and	r17, r19
  46:	00 36       	cpi	r16, 0x60	; 96
  48:	49 55       	subi	r20, 0x59	; 89
  4a:	22 50       	subi	r18, 0x02	; 2
  4c:	00 00       	nop
  4e:	05 03       	mulsu	r16, r21
  50:	00 00       	nop
  52:	00 00       	nop
  54:	1c 22       	and	r1, r28
  56:	41 00       	.word	0x0041	; ????
  58:	00 00       	nop
  5a:	41 22       	and	r4, r17
  5c:	1c 00       	.word	0x001c	; ????
  5e:	00 14       	cp	r0, r0
  60:	08 3e       	cpi	r16, 0xE8	; 232
  62:	08 14       	cp	r0, r8
  64:	00 08       	sbc	r0, r0
  66:	08 3e       	cpi	r16, 0xE8	; 232
  68:	08 08       	sbc	r0, r8
  6a:	00 00       	nop
  6c:	00 a0       	ldd	r0, Z+32	; 0x20
  6e:	60 00       	.word	0x0060	; ????
  70:	00 08       	sbc	r0, r0
  72:	08 08       	sbc	r0, r8
  74:	08 08       	sbc	r0, r8
  76:	00 00       	nop
  78:	60 60       	ori	r22, 0x00	; 0
  7a:	00 00       	nop
  7c:	00 20       	and	r0, r0
  7e:	10 08       	sbc	r1, r0
  80:	04 02       	muls	r16, r20
  82:	00 3e       	cpi	r16, 0xE0	; 224
  84:	51 49       	sbci	r21, 0x91	; 145
  86:	45 3e       	cpi	r20, 0xE5	; 229
  88:	00 00       	nop
  8a:	42 7f       	andi	r20, 0xF2	; 242
  8c:	40 00       	.word	0x0040	; ????
  8e:	00 42       	sbci	r16, 0x20	; 32
  90:	61 51       	subi	r22, 0x11	; 17
  92:	49 46       	sbci	r20, 0x69	; 105
  94:	00 21       	and	r16, r0
  96:	41 45       	sbci	r20, 0x51	; 81
  98:	4b 31       	cpi	r20, 0x1B	; 27
  9a:	00 18       	sub	r0, r0
  9c:	14 12       	cpse	r1, r20
  9e:	7f 10       	cpse	r7, r15
  a0:	00 27       	eor	r16, r16
  a2:	45 45       	sbci	r20, 0x55	; 85
  a4:	45 39       	cpi	r20, 0x95	; 149
  a6:	00 3c       	cpi	r16, 0xC0	; 192
  a8:	4a 49       	sbci	r20, 0x9A	; 154
  aa:	49 30       	cpi	r20, 0x09	; 9
  ac:	00 01       	movw	r0, r0
  ae:	71 09       	sbc	r23, r1
  b0:	05 03       	mulsu	r16, r21
  b2:	00 36       	cpi	r16, 0x60	; 96
  b4:	49 49       	sbci	r20, 0x99	; 153
  b6:	49 36       	cpi	r20, 0x69	; 105
  b8:	00 06       	cpc	r0, r16
  ba:	49 49       	sbci	r20, 0x99	; 153
  bc:	29 1e       	adc	r2, r25
  be:	00 00       	nop
  c0:	36 36       	cpi	r19, 0x66	; 102
  c2:	00 00       	nop
  c4:	00 00       	nop
  c6:	56 36       	cpi	r21, 0x66	; 102
  c8:	00 00       	nop
  ca:	00 08       	sbc	r0, r0
  cc:	14 22       	and	r1, r20
  ce:	41 00       	.word	0x0041	; ????
  d0:	00 14       	cp	r0, r0
  d2:	14 14       	cp	r1, r4
  d4:	14 14       	cp	r1, r4
  d6:	00 00       	nop
  d8:	41 22       	and	r4, r17
  da:	14 08       	sbc	r1, r4
  dc:	00 02       	muls	r16, r16
  de:	01 51       	subi	r16, 0x11	; 17
  e0:	09 06       	cpc	r0, r25
  e2:	00 32       	cpi	r16, 0x20	; 32
  e4:	49 59       	subi	r20, 0x99	; 153
  e6:	51 3e       	cpi	r21, 0xE1	; 225
  e8:	00 7c       	andi	r16, 0xC0	; 192
  ea:	12 11       	cpse	r17, r2
  ec:	12 7c       	andi	r17, 0xC2	; 194
  ee:	00 7f       	andi	r16, 0xF0	; 240
  f0:	49 49       	sbci	r20, 0x99	; 153
  f2:	49 36       	cpi	r20, 0x69	; 105
  f4:	00 3e       	cpi	r16, 0xE0	; 224
  f6:	41 41       	sbci	r20, 0x11	; 17
  f8:	41 22       	and	r4, r17
  fa:	00 7f       	andi	r16, 0xF0	; 240
  fc:	41 41       	sbci	r20, 0x11	; 17
  fe:	22 1c       	adc	r2, r2
 100:	00 7f       	andi	r16, 0xF0	; 240
 102:	49 49       	sbci	r20, 0x99	; 153
 104:	49 41       	sbci	r20, 0x19	; 25
 106:	00 7f       	andi	r16, 0xF0	; 240
 108:	09 09       	sbc	r16, r9
 10a:	09 01       	movw	r0, r18
 10c:	00 3e       	cpi	r16, 0xE0	; 224
 10e:	41 49       	sbci	r20, 0x91	; 145
 110:	49 7a       	andi	r20, 0xA9	; 169
 112:	00 7f       	andi	r16, 0xF0	; 240
 114:	08 08       	sbc	r0, r8
 116:	08 7f       	andi	r16, 0xF8	; 248
 118:	00 00       	nop
 11a:	41 7f       	andi	r20, 0xF1	; 241
 11c:	41 00       	.word	0x0041	; ????
 11e:	00 20       	and	r0, r0
 120:	40 41       	sbci	r20, 0x10	; 16
 122:	3f 01       	movw	r6, r30
 124:	00 7f       	andi	r16, 0xF0	; 240
 126:	08 14       	cp	r0, r8
 128:	22 41       	sbci	r18, 0x12	; 18
 12a:	00 7f       	andi	r16, 0xF0	; 240
 12c:	40 40       	sbci	r20, 0x00	; 0
 12e:	40 40       	sbci	r20, 0x00	; 0
 130:	00 7f       	andi	r16, 0xF0	; 240
 132:	02 0c       	add	r0, r2
 134:	02 7f       	andi	r16, 0xF2	; 242
 136:	00 7f       	andi	r16, 0xF0	; 240
 138:	04 08       	sbc	r0, r4
 13a:	10 7f       	andi	r17, 0xF0	; 240
 13c:	00 3e       	cpi	r16, 0xE0	; 224
 13e:	41 41       	sbci	r20, 0x11	; 17
 140:	41 3e       	cpi	r20, 0xE1	; 225
 142:	00 7f       	andi	r16, 0xF0	; 240
 144:	09 09       	sbc	r16, r9
 146:	09 06       	cpc	r0, r25
 148:	00 3e       	cpi	r16, 0xE0	; 224
 14a:	41 51       	subi	r20, 0x11	; 17
 14c:	21 5e       	subi	r18, 0xE1	; 225
 14e:	00 7f       	andi	r16, 0xF0	; 240
 150:	09 19       	sub	r16, r9
 152:	29 46       	sbci	r18, 0x69	; 105
 154:	00 46       	sbci	r16, 0x60	; 96
 156:	49 49       	sbci	r20, 0x99	; 153
 158:	49 31       	cpi	r20, 0x19	; 25
 15a:	00 01       	movw	r0, r0
 15c:	01 7f       	andi	r16, 0xF1	; 241
 15e:	01 01       	movw	r0, r2
 160:	00 3f       	cpi	r16, 0xF0	; 240
 162:	40 40       	sbci	r20, 0x00	; 0
 164:	40 3f       	cpi	r20, 0xF0	; 240
 166:	00 1f       	adc	r16, r16
 168:	20 40       	sbci	r18, 0x00	; 0
 16a:	20 1f       	adc	r18, r16
 16c:	00 3f       	cpi	r16, 0xF0	; 240
 16e:	40 38       	cpi	r20, 0x80	; 128
 170:	40 3f       	cpi	r20, 0xF0	; 240
 172:	00 63       	ori	r16, 0x30	; 48
 174:	14 08       	sbc	r1, r4
 176:	14 63       	ori	r17, 0x34	; 52
 178:	00 07       	cpc	r16, r16
 17a:	08 70       	andi	r16, 0x08	; 8
 17c:	08 07       	cpc	r16, r24
 17e:	00 61       	ori	r16, 0x10	; 16
 180:	51 49       	sbci	r21, 0x91	; 145
 182:	45 43       	sbci	r20, 0x35	; 53
 184:	00 00       	nop
 186:	7f 41       	sbci	r23, 0x1F	; 31
 188:	41 00       	.word	0x0041	; ????
 18a:	00 55       	subi	r16, 0x50	; 80
 18c:	2a 55       	subi	r18, 0x5A	; 90
 18e:	2a 55       	subi	r18, 0x5A	; 90
 190:	00 00       	nop
 192:	41 41       	sbci	r20, 0x11	; 17
 194:	7f 00       	.word	0x007f	; ????
 196:	00 04       	cpc	r0, r0
 198:	02 01       	movw	r0, r4
 19a:	02 04       	cpc	r0, r2
 19c:	00 40       	sbci	r16, 0x00	; 0
 19e:	40 40       	sbci	r20, 0x00	; 0
 1a0:	40 40       	sbci	r20, 0x00	; 0
 1a2:	00 00       	nop
 1a4:	01 02       	muls	r16, r17
 1a6:	04 00       	.word	0x0004	; ????
 1a8:	00 20       	and	r0, r0
 1aa:	54 54       	subi	r21, 0x44	; 68
 1ac:	54 78       	andi	r21, 0x84	; 132
 1ae:	00 7f       	andi	r16, 0xF0	; 240
 1b0:	48 44       	sbci	r20, 0x48	; 72
 1b2:	44 38       	cpi	r20, 0x84	; 132
 1b4:	00 38       	cpi	r16, 0x80	; 128
 1b6:	44 44       	sbci	r20, 0x44	; 68
 1b8:	44 20       	and	r4, r4
 1ba:	00 38       	cpi	r16, 0x80	; 128
 1bc:	44 44       	sbci	r20, 0x44	; 68
 1be:	48 7f       	andi	r20, 0xF8	; 248
 1c0:	00 38       	cpi	r16, 0x80	; 128
 1c2:	54 54       	subi	r21, 0x44	; 68
 1c4:	54 18       	sub	r5, r4
 1c6:	00 08       	sbc	r0, r0
 1c8:	7e 09       	sbc	r23, r14
 1ca:	01 02       	muls	r16, r17
 1cc:	00 18       	sub	r0, r0
 1ce:	a4 a4       	ldd	r10, Z+44	; 0x2c
 1d0:	a4 7c       	andi	r26, 0xC4	; 196
 1d2:	00 7f       	andi	r16, 0xF0	; 240
 1d4:	08 04       	cpc	r0, r8
 1d6:	04 78       	andi	r16, 0x84	; 132
 1d8:	00 00       	nop
 1da:	44 7d       	andi	r20, 0xD4	; 212
 1dc:	40 00       	.word	0x0040	; ????
 1de:	00 40       	sbci	r16, 0x00	; 0
 1e0:	80 84       	ldd	r8, Z+8	; 0x08
 1e2:	7d 00       	.word	0x007d	; ????
 1e4:	00 7f       	andi	r16, 0xF0	; 240
 1e6:	10 28       	or	r1, r0
 1e8:	44 00       	.word	0x0044	; ????
 1ea:	00 00       	nop
 1ec:	41 7f       	andi	r20, 0xF1	; 241
 1ee:	40 00       	.word	0x0040	; ????
 1f0:	00 7c       	andi	r16, 0xC0	; 192
 1f2:	04 18       	sub	r0, r4
 1f4:	04 78       	andi	r16, 0x84	; 132
 1f6:	00 7c       	andi	r16, 0xC0	; 192
 1f8:	08 04       	cpc	r0, r8
 1fa:	04 78       	andi	r16, 0x84	; 132
 1fc:	00 38       	cpi	r16, 0x80	; 128
 1fe:	44 44       	sbci	r20, 0x44	; 68
 200:	44 38       	cpi	r20, 0x84	; 132
 202:	00 fc       	sbrc	r0, 0
 204:	24 24       	eor	r2, r4
 206:	24 18       	sub	r2, r4
 208:	00 18       	sub	r0, r0
 20a:	24 24       	eor	r2, r4
 20c:	18 fc       	.word	0xfc18	; ????
 20e:	00 7c       	andi	r16, 0xC0	; 192
 210:	08 04       	cpc	r0, r8
 212:	04 08       	sbc	r0, r4
 214:	00 48       	sbci	r16, 0x80	; 128
 216:	54 54       	subi	r21, 0x44	; 68
 218:	54 20       	and	r5, r4
 21a:	00 04       	cpc	r0, r0
 21c:	3f 44       	sbci	r19, 0x4F	; 79
 21e:	40 20       	and	r4, r0
 220:	00 3c       	cpi	r16, 0xC0	; 192
 222:	40 40       	sbci	r20, 0x00	; 0
 224:	20 7c       	andi	r18, 0xC0	; 192
 226:	00 1c       	adc	r0, r0
 228:	20 40       	sbci	r18, 0x00	; 0
 22a:	20 1c       	adc	r2, r0
 22c:	00 3c       	cpi	r16, 0xC0	; 192
 22e:	40 30       	cpi	r20, 0x00	; 0
 230:	40 3c       	cpi	r20, 0xC0	; 192
 232:	00 44       	sbci	r16, 0x40	; 64
 234:	28 10       	cpse	r2, r8
 236:	28 44       	sbci	r18, 0x48	; 72
 238:	00 1c       	adc	r0, r0
 23a:	a0 a0       	ldd	r10, Z+32	; 0x20
 23c:	a0 7c       	andi	r26, 0xC0	; 192
 23e:	00 44       	sbci	r16, 0x40	; 64
 240:	64 54       	subi	r22, 0x44	; 68
 242:	4c 44       	sbci	r20, 0x4C	; 76
 244:	14 14       	cp	r1, r4
 246:	14 14       	cp	r1, r4
 248:	14 14       	cp	r1, r4

0000024a <__ctors_end>:
 24a:	11 24       	eor	r1, r1
 24c:	1f be       	out	0x3f, r1	; 63
 24e:	cf e5       	ldi	r28, 0x5F	; 95
 250:	d1 e0       	ldi	r29, 0x01	; 1
 252:	de bf       	out	0x3e, r29	; 62
 254:	cd bf       	out	0x3d, r28	; 61

00000256 <__do_copy_data>:
 256:	10 e0       	ldi	r17, 0x00	; 0
 258:	a0 e6       	ldi	r26, 0x60	; 96
 25a:	b0 e0       	ldi	r27, 0x00	; 0
 25c:	ea ea       	ldi	r30, 0xAA	; 170
 25e:	f7 e0       	ldi	r31, 0x07	; 7
 260:	02 c0       	rjmp	.+4      	; 0x266 <__do_copy_data+0x10>
 262:	05 90       	lpm	r0, Z+
 264:	0d 92       	st	X+, r0
 266:	a2 3b       	cpi	r26, 0xB2	; 178
 268:	b1 07       	cpc	r27, r17
 26a:	d9 f7       	brne	.-10     	; 0x262 <__do_copy_data+0xc>

0000026c <__do_clear_bss>:
 26c:	20 e0       	ldi	r18, 0x00	; 0
 26e:	a2 eb       	ldi	r26, 0xB2	; 178
 270:	b0 e0       	ldi	r27, 0x00	; 0
 272:	01 c0       	rjmp	.+2      	; 0x276 <.do_clear_bss_start>

00000274 <.do_clear_bss_loop>:
 274:	1d 92       	st	X+, r1

00000276 <.do_clear_bss_start>:
 276:	a7 3b       	cpi	r26, 0xB7	; 183
 278:	b2 07       	cpc	r27, r18
 27a:	e1 f7       	brne	.-8      	; 0x274 <.do_clear_bss_loop>
 27c:	b8 d1       	rcall	.+880    	; 0x5ee <main>
 27e:	93 c2       	rjmp	.+1318   	; 0x7a6 <_exit>

00000280 <__bad_interrupt>:
 280:	bf ce       	rjmp	.-642    	; 0x0 <__vectors>

00000282 <_Z14LCD_write_bytehh>:
 
void LCD_write_byte(unsigned char dat, unsigned char command)
{
 unsigned char i;
 
 if (command == 1)
 282:	61 30       	cpi	r22, 0x01	; 1
 284:	11 f4       	brne	.+4      	; 0x28a <_Z14LCD_write_bytehh+0x8>
 LCD_DC_clr;
 286:	dc 98       	cbi	0x1b, 4	; 27
 288:	0d c0       	rjmp	.+26     	; 0x2a4 <_Z14LCD_write_bytehh+0x22>
 else
 LCD_DC_set;
 28a:	dc 9a       	sbi	0x1b, 4	; 27
 28c:	0b c0       	rjmp	.+22     	; 0x2a4 <_Z14LCD_write_bytehh+0x22>
 
 for(i=0;i<8;i++)
 {
  if(dat&0x80)
 28e:	88 23       	and	r24, r24
 290:	14 f4       	brge	.+4      	; 0x296 <_Z14LCD_write_bytehh+0x14>
  SDIN_set;
 292:	dd 9a       	sbi	0x1b, 5	; 27
 294:	01 c0       	rjmp	.+2      	; 0x298 <_Z14LCD_write_bytehh+0x16>
  else
  SDIN_clr;
 296:	dd 98       	cbi	0x1b, 5	; 27
  SCLK_clr;
 298:	de 98       	cbi	0x1b, 6	; 27
  dat = dat << 1;
 29a:	88 0f       	add	r24, r24
  SCLK_set;
 29c:	de 9a       	sbi	0x1b, 6	; 27
 29e:	91 50       	subi	r25, 0x01	; 1
 if (command == 1)
 LCD_DC_clr;
 else
 LCD_DC_set;
 
 for(i=0;i<8;i++)
 2a0:	b1 f7       	brne	.-20     	; 0x28e <_Z14LCD_write_bytehh+0xc>
 2a2:	08 95       	ret
void LCD_write_english_string(unsigned char X,unsigned char Y,char *s);
void drawBitmap(int x, int y, uint8_t* bitmap, int sx, int sy, bool flash);
 
 
void LCD_write_byte(unsigned char dat, unsigned char command)
{
 2a4:	98 e0       	ldi	r25, 0x08	; 8
 2a6:	f3 cf       	rjmp	.-26     	; 0x28e <_Z14LCD_write_bytehh+0xc>

000002a8 <_Z9LCD_clearv>:
  
 LCD_clear();             // clear the LCD
}
 
void LCD_clear() 
{
 2a8:	cf 93       	push	r28
 2aa:	df 93       	push	r29
 unsigned int i;
 
 LCD_write_byte(0x0c, 1);
 2ac:	61 e0       	ldi	r22, 0x01	; 1
 2ae:	8c e0       	ldi	r24, 0x0C	; 12
 2b0:	e8 df       	rcall	.-48     	; 0x282 <_Z14LCD_write_bytehh>
 LCD_write_byte(0x80, 1);
 2b2:	61 e0       	ldi	r22, 0x01	; 1
 2b4:	80 e8       	ldi	r24, 0x80	; 128
 2b6:	e5 df       	rcall	.-54     	; 0x282 <_Z14LCD_write_bytehh>
 2b8:	c8 ef       	ldi	r28, 0xF8	; 248
 2ba:	d1 e0       	ldi	r29, 0x01	; 1
 
 for (i=0; i<504; i++)
 {
  LCD_write_byte(0, 0);
 2bc:	60 e0       	ldi	r22, 0x00	; 0
 2be:	80 e0       	ldi	r24, 0x00	; 0
 2c0:	e0 df       	rcall	.-64     	; 0x282 <_Z14LCD_write_bytehh>
 2c2:	21 97       	sbiw	r28, 0x01	; 1
 unsigned int i;
 
 LCD_write_byte(0x0c, 1);
 LCD_write_byte(0x80, 1);
 
 for (i=0; i<504; i++)
 2c4:	d9 f7       	brne	.-10     	; 0x2bc <_Z9LCD_clearv+0x14>
 {
  LCD_write_byte(0, 0);
 }
}
 2c6:	df 91       	pop	r29
 2c8:	cf 91       	pop	r28
 2ca:	08 95       	ret

000002cc <_Z8LCD_initv>:
 }
}
 
void LCD_init() 
{
 DDRA |= (1<<PIN1) | (1<<PIN3) | (1<<PIN4) | (1<<PIN5) | (1<<PIN6);
 2cc:	8a b3       	in	r24, 0x1a	; 26
 2ce:	8a 67       	ori	r24, 0x7A	; 122
 2d0:	8a bb       	out	0x1a, r24	; 26
 LCD_CE_clr;
 2d2:	d9 98       	cbi	0x1b, 1	; 27
 LCD_RST_clr;
 2d4:	db 98       	cbi	0x1b, 3	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d6:	84 e0       	ldi	r24, 0x04	; 4
 2d8:	8a 95       	dec	r24
 2da:	f1 f7       	brne	.-4      	; 0x2d8 <_Z8LCD_initv+0xc>
 _delay_us(1);
 LCD_RST_set;
 2dc:	db 9a       	sbi	0x1b, 3	; 27
 2de:	84 e0       	ldi	r24, 0x04	; 4
 2e0:	8a 95       	dec	r24
 2e2:	f1 f7       	brne	.-4      	; 0x2e0 <_Z8LCD_initv+0x14>
 
 _delay_us(1);
 
 LCD_write_byte(0x21, 1); // set LCD mode
 2e4:	61 e0       	ldi	r22, 0x01	; 1
 2e6:	81 e2       	ldi	r24, 0x21	; 33
 2e8:	cc df       	rcall	.-104    	; 0x282 <_Z14LCD_write_bytehh>
// LCD_write_byte(0x13, 1); // 1:48
 LCD_write_byte(0xa1, 1); // Contrast
 2ea:	61 e0       	ldi	r22, 0x01	; 1
 2ec:	81 ea       	ldi	r24, 0xA1	; 161
 2ee:	c9 df       	rcall	.-110    	; 0x282 <_Z14LCD_write_bytehh>
 LCD_write_byte(0x13, 1); // set bias voltage
 2f0:	61 e0       	ldi	r22, 0x01	; 1
 2f2:	83 e1       	ldi	r24, 0x13	; 19
 2f4:	c6 df       	rcall	.-116    	; 0x282 <_Z14LCD_write_bytehh>
 LCD_write_byte(0x04, 1); // temperature correction
 2f6:	61 e0       	ldi	r22, 0x01	; 1
 2f8:	84 e0       	ldi	r24, 0x04	; 4
 2fa:	c3 df       	rcall	.-122    	; 0x282 <_Z14LCD_write_bytehh>

 LCD_write_byte(0x20, 1); // use bias command, vertical
 2fc:	61 e0       	ldi	r22, 0x01	; 1
 2fe:	80 e2       	ldi	r24, 0x20	; 32
 300:	c0 df       	rcall	.-128    	; 0x282 <_Z14LCD_write_bytehh>
 LCD_write_byte(0x0c, 1); // set LCD mode,display normally
 302:	61 e0       	ldi	r22, 0x01	; 1
 304:	8c e0       	ldi	r24, 0x0C	; 12
 306:	bd df       	rcall	.-134    	; 0x282 <_Z14LCD_write_bytehh>
  
 LCD_clear();             // clear the LCD
 308:	cf df       	rcall	.-98     	; 0x2a8 <_Z9LCD_clearv>
 30a:	08 95       	ret

0000030c <_Z10LCD_set_XYhh>:
  LCD_write_byte(0, 0);
 }
}
 
void LCD_set_XY(unsigned char X, unsigned char Y)
{
 30c:	cf 93       	push	r28
 30e:	c8 2f       	mov	r28, r24
 310:	86 2f       	mov	r24, r22
 LCD_write_byte(0x40 | Y, 1); // column
 312:	61 e0       	ldi	r22, 0x01	; 1
 314:	80 64       	ori	r24, 0x40	; 64
 316:	b5 df       	rcall	.-150    	; 0x282 <_Z14LCD_write_bytehh>
 LCD_write_byte(0x80 | X, 1);    // row
 318:	61 e0       	ldi	r22, 0x01	; 1
 31a:	8c 2f       	mov	r24, r28
 31c:	80 68       	ori	r24, 0x80	; 128
 31e:	b1 df       	rcall	.-158    	; 0x282 <_Z14LCD_write_bytehh>
}
 320:	cf 91       	pop	r28
 322:	08 95       	ret

00000324 <_Z14LCD_write_charh>:
 
void LCD_write_char(unsigned char c)
{
 324:	1f 93       	push	r17
 326:	cf 93       	push	r28
 328:	df 93       	push	r29
 32a:	80 52       	subi	r24, 0x20	; 32
 32c:	c8 2f       	mov	r28, r24
 32e:	d0 e0       	ldi	r29, 0x00	; 0
 330:	c8 0f       	add	r28, r24
 332:	d1 1d       	adc	r29, r1
 334:	c8 0f       	add	r28, r24
 336:	d1 1d       	adc	r29, r1
 338:	cc 0f       	add	r28, r28
 33a:	dd 1f       	adc	r29, r29
 33c:	ce 5d       	subi	r28, 0xDE	; 222
 33e:	df 4f       	sbci	r29, 0xFF	; 255
 unsigned char line;
 
 c -= 32;
 
 for (line=0; line<6; line++)
 340:	10 e0       	ldi	r17, 0x00	; 0
 LCD_write_byte(pgm_read_byte(&(font6x8[c][line])), 0);
 342:	fe 01       	movw	r30, r28
 344:	84 91       	lpm	r24, Z
 346:	60 e0       	ldi	r22, 0x00	; 0
 348:	9c df       	rcall	.-200    	; 0x282 <_Z14LCD_write_bytehh>
{
 unsigned char line;
 
 c -= 32;
 
 for (line=0; line<6; line++)
 34a:	1f 5f       	subi	r17, 0xFF	; 255
 34c:	21 96       	adiw	r28, 0x01	; 1
 34e:	16 30       	cpi	r17, 0x06	; 6
 350:	c1 f7       	brne	.-16     	; 0x342 <_Z14LCD_write_charh+0x1e>
 LCD_write_byte(pgm_read_byte(&(font6x8[c][line])), 0);
 
}
 352:	df 91       	pop	r29
 354:	cf 91       	pop	r28
 356:	1f 91       	pop	r17
 358:	08 95       	ret

0000035a <_Z24LCD_write_english_stringhhPc>:
 
void LCD_write_english_string(unsigned char X,unsigned char Y,char *s)
{
 35a:	cf 93       	push	r28
 35c:	df 93       	push	r29
 35e:	ea 01       	movw	r28, r20
 LCD_set_XY(X,Y);
 360:	d5 df       	rcall	.-86     	; 0x30c <_Z10LCD_set_XYhh>
 while (*s)
 362:	88 81       	ld	r24, Y
 364:	88 23       	and	r24, r24
 366:	29 f0       	breq	.+10     	; 0x372 <_Z24LCD_write_english_stringhhPc+0x18>
 368:	21 96       	adiw	r28, 0x01	; 1
 {
  LCD_write_char(*s);
 36a:	dc df       	rcall	.-72     	; 0x324 <_Z14LCD_write_charh>
}
 
void LCD_write_english_string(unsigned char X,unsigned char Y,char *s)
{
 LCD_set_XY(X,Y);
 while (*s)
 36c:	89 91       	ld	r24, Y+
 36e:	81 11       	cpse	r24, r1
 370:	fc cf       	rjmp	.-8      	; 0x36a <_Z24LCD_write_english_stringhhPc+0x10>
 {
  LCD_write_char(*s);
  s++;
 }
 372:	df 91       	pop	r29
 374:	cf 91       	pop	r28
 376:	08 95       	ret

00000378 <_Z10uinttocharPcj>:
volatile uint8_t adc_lobyte; // to hold the low byte of the ADC register (ADCL)
volatile int raw_temp;*/


void uinttochar(char* a, uint16_t n)
{
 378:	ef 92       	push	r14
 37a:	ff 92       	push	r15
 37c:	0f 93       	push	r16
 37e:	1f 93       	push	r17
 380:	cf 93       	push	r28
 382:	df 93       	push	r29
 384:	cd b7       	in	r28, 0x3d	; 61
 386:	de b7       	in	r29, 0x3e	; 62
 388:	64 97       	sbiw	r28, 0x14	; 20
 38a:	0f b6       	in	r0, 0x3f	; 63
 38c:	f8 94       	cli
 38e:	de bf       	out	0x3e, r29	; 62
 390:	0f be       	out	0x3f, r0	; 63
 392:	cd bf       	out	0x3d, r28	; 61
 394:	7c 01       	movw	r14, r24
 396:	cb 01       	movw	r24, r22

	if (n == 0)
 398:	00 97       	sbiw	r24, 0x00	; 0
 39a:	29 f4       	brne	.+10     	; 0x3a6 <_Z10uinttocharPcj+0x2e>
	{
		*a = '0';
 39c:	80 e3       	ldi	r24, 0x30	; 48
 39e:	f7 01       	movw	r30, r14
 3a0:	80 83       	st	Z, r24
		*(a+1) = '\0';
 3a2:	11 82       	std	Z+1, r1	; 0x01
 3a4:	15 c0       	rjmp	.+42     	; 0x3d0 <_Z10uinttocharPcj+0x58>
		return;
	}
	
	char aux[20];
	aux[19] = '\0';
 3a6:	1c 8a       	std	Y+20, r1	; 0x14
 3a8:	21 e0       	ldi	r18, 0x01	; 1
 3aa:	30 e0       	ldi	r19, 0x00	; 0
 3ac:	fe 01       	movw	r30, r28
 3ae:	74 96       	adiw	r30, 0x14	; 20
	
	int c = 1;
	while (n != 0)
	{
		int mod = n % 10;
		*(--auxp) = mod | 0x30;
 3b0:	0a e0       	ldi	r16, 0x0A	; 10
 3b2:	10 e0       	ldi	r17, 0x00	; 0
 3b4:	b8 01       	movw	r22, r16
 3b6:	da d1       	rcall	.+948    	; 0x76c <__udivmodhi4>
 3b8:	80 63       	ori	r24, 0x30	; 48
 3ba:	82 93       	st	-Z, r24
		n /=  10;
 3bc:	86 2f       	mov	r24, r22
 3be:	97 2f       	mov	r25, r23
		c++;
 3c0:	2f 5f       	subi	r18, 0xFF	; 255
 3c2:	3f 4f       	sbci	r19, 0xFF	; 255
	char aux[20];
	aux[19] = '\0';
	char* auxp = aux + 19;
	
	int c = 1;
	while (n != 0)
 3c4:	00 97       	sbiw	r24, 0x00	; 0
 3c6:	b1 f7       	brne	.-20     	; 0x3b4 <_Z10uinttocharPcj+0x3c>
		*(--auxp) = mod | 0x30;
		n /=  10;
		c++;
	}
	
	memcpy(a, auxp, c);
 3c8:	a9 01       	movw	r20, r18
 3ca:	bf 01       	movw	r22, r30
 3cc:	c7 01       	movw	r24, r14
 3ce:	e2 d1       	rcall	.+964    	; 0x794 <memcpy>

}
 3d0:	64 96       	adiw	r28, 0x14	; 20
 3d2:	0f b6       	in	r0, 0x3f	; 63
 3d4:	f8 94       	cli
 3d6:	de bf       	out	0x3e, r29	; 62
 3d8:	0f be       	out	0x3f, r0	; 63
 3da:	cd bf       	out	0x3d, r28	; 61
 3dc:	df 91       	pop	r29
 3de:	cf 91       	pop	r28
 3e0:	1f 91       	pop	r17
 3e2:	0f 91       	pop	r16
 3e4:	ff 90       	pop	r15
 3e6:	ef 90       	pop	r14
 3e8:	08 95       	ret

000003ea <_Z12sleepRoutinev>:
	}
}

void sleepRoutine(){
	
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 3ea:	85 b7       	in	r24, 0x35	; 53
 3ec:	87 7e       	andi	r24, 0xE7	; 231
 3ee:	80 61       	ori	r24, 0x10	; 16
 3f0:	85 bf       	out	0x35, r24	; 53
	sleep_enable();
 3f2:	85 b7       	in	r24, 0x35	; 53
 3f4:	80 62       	ori	r24, 0x20	; 32
 3f6:	85 bf       	out	0x35, r24	; 53
	sleep_bod_disable();
 3f8:	85 b7       	in	r24, 0x35	; 53
 3fa:	84 68       	ori	r24, 0x84	; 132
 3fc:	85 bf       	out	0x35, r24	; 53
 3fe:	8b 7f       	andi	r24, 0xFB	; 251
 400:	85 bf       	out	0x35, r24	; 53
	
	PORTA &= !(1 << PINA7); // Back light disable
 402:	8b b3       	in	r24, 0x1b	; 27
 404:	1b ba       	out	0x1b, r1	; 27
	
	LCD_RST_clr; // LCD off
 406:	db 98       	cbi	0x1b, 3	; 27
	LCD_DC_clr;
 408:	dc 98       	cbi	0x1b, 4	; 27
	SDIN_clr;
 40a:	dd 98       	cbi	0x1b, 5	; 27
	SCLK_clr;
 40c:	de 98       	cbi	0x1b, 6	; 27
	
	TIMSK1 &= ~(1<<OCIE1A); // Timer off
 40e:	61 98       	cbi	0x0c, 1	; 12
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 410:	2f ef       	ldi	r18, 0xFF	; 255
 412:	8e e9       	ldi	r24, 0x9E	; 158
 414:	94 e2       	ldi	r25, 0x24	; 36
 416:	21 50       	subi	r18, 0x01	; 1
 418:	80 40       	sbci	r24, 0x00	; 0
 41a:	90 40       	sbci	r25, 0x00	; 0
 41c:	e1 f7       	brne	.-8      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 41e:	00 c0       	rjmp	.+0      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 420:	00 00       	nop

	_delay_ms(1000); // Preventing from occasional restart
	
	sei();
 422:	78 94       	sei
	sleep_cpu();
 424:	88 95       	sleep
 426:	08 95       	ret

00000428 <_Z13wakeUpRoutinev>:
}

void wakeUpRoutine(){
	
	sleep_disable();
 428:	85 b7       	in	r24, 0x35	; 53
 42a:	8f 7d       	andi	r24, 0xDF	; 223
 42c:	85 bf       	out	0x35, r24	; 53
		
	PORTA |= 1 << PINA7; // Back Light ON
 42e:	df 9a       	sbi	0x1b, 7	; 27
	LCD_init(); // LCD ON
 430:	4d df       	rcall	.-358    	; 0x2cc <_Z8LCD_initv>
	//initADC();
	
	TIMSK1 |=  (1<<OCIE1A); // Timer ON
 432:	61 9a       	sbi	0x0c, 1	; 12
	sec = 0; // reseting ON timer
 434:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <sec>
	count = 0;
 438:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__data_end+0x1>
 43c:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__data_end>
	idle = 0;
 440:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <idle>
 444:	08 95       	ret

00000446 <_Z11helloScreenv>:
	
}

void helloScreen(void){
	LCD_write_english_string(32, 0, "(c) ");
 446:	40 e6       	ldi	r20, 0x60	; 96
 448:	50 e0       	ldi	r21, 0x00	; 0
 44a:	60 e0       	ldi	r22, 0x00	; 0
 44c:	80 e2       	ldi	r24, 0x20	; 32
 44e:	85 df       	rcall	.-246    	; 0x35a <_Z24LCD_write_english_stringhhPc>
	LCD_write_english_string(0, 1, "Mikhail Ivanov");
 450:	45 e6       	ldi	r20, 0x65	; 101
 452:	50 e0       	ldi	r21, 0x00	; 0
 454:	61 e0       	ldi	r22, 0x01	; 1
 456:	80 e0       	ldi	r24, 0x00	; 0
 458:	80 df       	rcall	.-256    	; 0x35a <_Z24LCD_write_english_stringhhPc>
	LCD_write_english_string(0, 2, "         ");
 45a:	49 e9       	ldi	r20, 0x99	; 153
 45c:	50 e0       	ldi	r21, 0x00	; 0
 45e:	62 e0       	ldi	r22, 0x02	; 2
 460:	80 e0       	ldi	r24, 0x00	; 0
 462:	7b df       	rcall	.-266    	; 0x35a <_Z24LCD_write_english_stringhhPc>
	LCD_write_english_string(0, 3, "mivanov@3m.com");
 464:	44 e7       	ldi	r20, 0x74	; 116
 466:	50 e0       	ldi	r21, 0x00	; 0
 468:	63 e0       	ldi	r22, 0x03	; 3
 46a:	80 e0       	ldi	r24, 0x00	; 0
 46c:	76 df       	rcall	.-276    	; 0x35a <_Z24LCD_write_english_stringhhPc>
	LCD_write_english_string(28, 5, "v1.3");
 46e:	43 e8       	ldi	r20, 0x83	; 131
 470:	50 e0       	ldi	r21, 0x00	; 0
 472:	65 e0       	ldi	r22, 0x05	; 5
 474:	8c e1       	ldi	r24, 0x1C	; 28
 476:	71 df       	rcall	.-286    	; 0x35a <_Z24LCD_write_english_stringhhPc>
	if (sec == 3) LCD_clear();
 478:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <sec>
 47c:	83 30       	cpi	r24, 0x03	; 3
 47e:	09 f4       	brne	.+2      	; 0x482 <_Z11helloScreenv+0x3c>
 480:	13 df       	rcall	.-474    	; 0x2a8 <_Z9LCD_clearv>
 482:	08 95       	ret

00000484 <_Z18everySecondRoutinev>:
	memcpy(a, auxp, c);

}


void everySecondRoutine(void){
 484:	0f 93       	push	r16
 486:	1f 93       	push	r17
 488:	cf 93       	push	r28
 48a:	df 93       	push	r29
 48c:	cd b7       	in	r28, 0x3d	; 61
 48e:	de b7       	in	r29, 0x3e	; 62
 490:	2a 97       	sbiw	r28, 0x0a	; 10
 492:	0f b6       	in	r0, 0x3f	; 63
 494:	f8 94       	cli
 496:	de bf       	out	0x3e, r29	; 62
 498:	0f be       	out	0x3f, r0	; 63
 49a:	cd bf       	out	0x3d, r28	; 61
	if (sec <= 3) {
 49c:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <sec>
 4a0:	84 30       	cpi	r24, 0x04	; 4
 4a2:	18 f4       	brcc	.+6      	; 0x4aa <_Z18everySecondRoutinev+0x26>
		LCD_clear();
 4a4:	01 df       	rcall	.-510    	; 0x2a8 <_Z9LCD_clearv>
		helloScreen();
 4a6:	cf df       	rcall	.-98     	; 0x446 <_Z11helloScreenv>
 4a8:	97 c0       	rjmp	.+302    	; 0x5d8 <_Z18everySecondRoutinev+0x154>
	}
	
	else {			
		char buf1[10];
			
		if (count <= 35) count = 0;
 4aa:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <__data_end>
 4ae:	90 91 b3 00 	lds	r25, 0x00B3	; 0x8000b3 <__data_end+0x1>
 4b2:	84 97       	sbiw	r24, 0x24	; 36
 4b4:	20 f4       	brcc	.+8      	; 0x4be <_Z18everySecondRoutinev+0x3a>
 4b6:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__data_end+0x1>
 4ba:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__data_end>
		
		if (count == 0 && idle <= 70) idle++;
 4be:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <__data_end>
 4c2:	90 91 b3 00 	lds	r25, 0x00B3	; 0x8000b3 <__data_end+0x1>
 4c6:	89 2b       	or	r24, r25
 4c8:	09 f0       	breq	.+2      	; 0x4cc <_Z18everySecondRoutinev+0x48>
 4ca:	7e c0       	rjmp	.+252    	; 0x5c8 <_Z18everySecondRoutinev+0x144>
 4cc:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <idle>
 4d0:	87 34       	cpi	r24, 0x47	; 71
 4d2:	08 f4       	brcc	.+2      	; 0x4d6 <_Z18everySecondRoutinev+0x52>
 4d4:	73 c0       	rjmp	.+230    	; 0x5bc <_Z18everySecondRoutinev+0x138>
 4d6:	78 c0       	rjmp	.+240    	; 0x5c8 <_Z18everySecondRoutinev+0x144>
		else if (count != 0) idle = 0;
 4d8:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <idle>
			itoa(raw_temp, buf2, 10);
		
		}*/
				
		
		uint16_t result = count* 22 / 200 + 52;		// RPM to LPM conversion
 4dc:	20 91 b2 00 	lds	r18, 0x00B2	; 0x8000b2 <__data_end>
 4e0:	30 91 b3 00 	lds	r19, 0x00B3	; 0x8000b3 <__data_end+0x1>
 4e4:	c9 01       	movw	r24, r18
 4e6:	88 0f       	add	r24, r24
 4e8:	99 1f       	adc	r25, r25
 4ea:	88 0f       	add	r24, r24
 4ec:	99 1f       	adc	r25, r25
 4ee:	82 0f       	add	r24, r18
 4f0:	93 1f       	adc	r25, r19
 4f2:	88 0f       	add	r24, r24
 4f4:	99 1f       	adc	r25, r25
 4f6:	82 0f       	add	r24, r18
 4f8:	93 1f       	adc	r25, r19
 4fa:	88 0f       	add	r24, r24
 4fc:	99 1f       	adc	r25, r25
 4fe:	68 ec       	ldi	r22, 0xC8	; 200
 500:	70 e0       	ldi	r23, 0x00	; 0
 502:	34 d1       	rcall	.+616    	; 0x76c <__udivmodhi4>
 504:	8b 01       	movw	r16, r22
 506:	0c 5c       	subi	r16, 0xCC	; 204
 508:	1f 4f       	sbci	r17, 0xFF	; 255
		
		uinttochar(buf1, result);
 50a:	b8 01       	movw	r22, r16
 50c:	ce 01       	movw	r24, r28
 50e:	01 96       	adiw	r24, 0x01	; 1
 510:	33 df       	rcall	.-410    	; 0x378 <_Z10uinttocharPcj>
		
				
							
		LCD_write_english_string(27, 0, "Flow:");
 512:	48 e8       	ldi	r20, 0x88	; 136
 514:	50 e0       	ldi	r21, 0x00	; 0
 516:	60 e0       	ldi	r22, 0x00	; 0
 518:	8b e1       	ldi	r24, 0x1B	; 27
 51a:	1f df       	rcall	.-450    	; 0x35a <_Z24LCD_write_english_stringhhPc>
		LCD_write_english_string(35, 2, "     ");
 51c:	4d e9       	ldi	r20, 0x9D	; 157
 51e:	50 e0       	ldi	r21, 0x00	; 0
 520:	62 e0       	ldi	r22, 0x02	; 2
 522:	83 e2       	ldi	r24, 0x23	; 35
 524:	1a df       	rcall	.-460    	; 0x35a <_Z24LCD_write_english_stringhhPc>
		LCD_write_english_string(0, 4, "                 ");
 526:	41 e9       	ldi	r20, 0x91	; 145
 528:	50 e0       	ldi	r21, 0x00	; 0
 52a:	64 e0       	ldi	r22, 0x04	; 4
 52c:	80 e0       	ldi	r24, 0x00	; 0
 52e:	15 df       	rcall	.-470    	; 0x35a <_Z24LCD_write_english_stringhhPc>
		else if (raw_temp >= 0){
			LCD_write_english_string(60, 5, "C");
		}*/
		
		
		if (result <= 55) {
 530:	08 33       	cpi	r16, 0x38	; 56
 532:	11 05       	cpc	r17, r1
 534:	80 f4       	brcc	.+32     	; 0x556 <_Z18everySecondRoutinev+0xd2>
			LCD_write_english_string(20, 3, "                    ");
 536:	4e e8       	ldi	r20, 0x8E	; 142
 538:	50 e0       	ldi	r21, 0x00	; 0
 53a:	63 e0       	ldi	r22, 0x03	; 3
 53c:	84 e1       	ldi	r24, 0x14	; 20
 53e:	0d df       	rcall	.-486    	; 0x35a <_Z24LCD_write_english_stringhhPc>
			LCD_write_english_string(20, 2, "                    ");
 540:	4e e8       	ldi	r20, 0x8E	; 142
 542:	50 e0       	ldi	r21, 0x00	; 0
 544:	62 e0       	ldi	r22, 0x02	; 2
 546:	84 e1       	ldi	r24, 0x14	; 20
 548:	08 df       	rcall	.-496    	; 0x35a <_Z24LCD_write_english_stringhhPc>
			LCD_write_english_string(20, 3, "Too low!");
 54a:	43 ea       	ldi	r20, 0xA3	; 163
 54c:	50 e0       	ldi	r21, 0x00	; 0
 54e:	63 e0       	ldi	r22, 0x03	; 3
 550:	84 e1       	ldi	r24, 0x14	; 20
 552:	03 df       	rcall	.-506    	; 0x35a <_Z24LCD_write_english_stringhhPc>
 554:	2e c0       	rjmp	.+92     	; 0x5b2 <_Z18everySecondRoutinev+0x12e>
	
		}
		
		else if (result < 100) {
 556:	04 36       	cpi	r16, 0x64	; 100
 558:	11 05       	cpc	r17, r1
 55a:	b0 f4       	brcc	.+44     	; 0x588 <_Z18everySecondRoutinev+0x104>
			LCD_write_english_string(15, 3, "          ");
 55c:	48 e9       	ldi	r20, 0x98	; 152
 55e:	50 e0       	ldi	r21, 0x00	; 0
 560:	63 e0       	ldi	r22, 0x03	; 3
 562:	8f e0       	ldi	r24, 0x0F	; 15
 564:	fa de       	rcall	.-524    	; 0x35a <_Z24LCD_write_english_stringhhPc>
			LCD_write_english_string(20, 4, "          ");
 566:	48 e9       	ldi	r20, 0x98	; 152
 568:	50 e0       	ldi	r21, 0x00	; 0
 56a:	64 e0       	ldi	r22, 0x04	; 4
 56c:	84 e1       	ldi	r24, 0x14	; 20
 56e:	f5 de       	rcall	.-534    	; 0x35a <_Z24LCD_write_english_stringhhPc>
			LCD_write_english_string(35, 3, buf1);
 570:	ae 01       	movw	r20, r28
 572:	4f 5f       	subi	r20, 0xFF	; 255
 574:	5f 4f       	sbci	r21, 0xFF	; 255
 576:	63 e0       	ldi	r22, 0x03	; 3
 578:	83 e2       	ldi	r24, 0x23	; 35
 57a:	ef de       	rcall	.-546    	; 0x35a <_Z24LCD_write_english_stringhhPc>
			LCD_write_english_string(25, 4, "L/min");
 57c:	4c ea       	ldi	r20, 0xAC	; 172
 57e:	50 e0       	ldi	r21, 0x00	; 0
 580:	64 e0       	ldi	r22, 0x04	; 4
 582:	89 e1       	ldi	r24, 0x19	; 25
 584:	ea de       	rcall	.-556    	; 0x35a <_Z24LCD_write_english_stringhhPc>
 586:	15 c0       	rjmp	.+42     	; 0x5b2 <_Z18everySecondRoutinev+0x12e>
		//	LCD_write_english_string(20, 4, buf2);
		}
		
		else {
			LCD_write_english_string(15, 3, "           ");
 588:	47 e9       	ldi	r20, 0x97	; 151
 58a:	50 e0       	ldi	r21, 0x00	; 0
 58c:	63 e0       	ldi	r22, 0x03	; 3
 58e:	8f e0       	ldi	r24, 0x0F	; 15
 590:	e4 de       	rcall	.-568    	; 0x35a <_Z24LCD_write_english_stringhhPc>
			LCD_write_english_string(20, 4, "           ");
 592:	47 e9       	ldi	r20, 0x97	; 151
 594:	50 e0       	ldi	r21, 0x00	; 0
 596:	64 e0       	ldi	r22, 0x04	; 4
 598:	84 e1       	ldi	r24, 0x14	; 20
 59a:	df de       	rcall	.-578    	; 0x35a <_Z24LCD_write_english_stringhhPc>
			LCD_write_english_string(31, 3, buf1);
 59c:	ae 01       	movw	r20, r28
 59e:	4f 5f       	subi	r20, 0xFF	; 255
 5a0:	5f 4f       	sbci	r21, 0xFF	; 255
 5a2:	63 e0       	ldi	r22, 0x03	; 3
 5a4:	8f e1       	ldi	r24, 0x1F	; 31
 5a6:	d9 de       	rcall	.-590    	; 0x35a <_Z24LCD_write_english_stringhhPc>
			LCD_write_english_string(25, 4, "L/min");
 5a8:	4c ea       	ldi	r20, 0xAC	; 172
 5aa:	50 e0       	ldi	r21, 0x00	; 0
 5ac:	64 e0       	ldi	r22, 0x04	; 4
 5ae:	89 e1       	ldi	r24, 0x19	; 25
 5b0:	d4 de       	rcall	.-600    	; 0x35a <_Z24LCD_write_english_stringhhPc>
		//	LCD_write_english_string(20, 4, buf2);
			}
									
		count = 0;
 5b2:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__data_end+0x1>
 5b6:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__data_end>
	}
}
 5ba:	0e c0       	rjmp	.+28     	; 0x5d8 <_Z18everySecondRoutinev+0x154>
	else {			
		char buf1[10];
			
		if (count <= 35) count = 0;
		
		if (count == 0 && idle <= 70) idle++;
 5bc:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <idle>
 5c0:	8f 5f       	subi	r24, 0xFF	; 255
 5c2:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <idle>
 5c6:	8a cf       	rjmp	.-236    	; 0x4dc <_Z18everySecondRoutinev+0x58>
		else if (count != 0) idle = 0;
 5c8:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <__data_end>
 5cc:	90 91 b3 00 	lds	r25, 0x00B3	; 0x8000b3 <__data_end+0x1>
 5d0:	89 2b       	or	r24, r25
 5d2:	09 f0       	breq	.+2      	; 0x5d6 <_Z18everySecondRoutinev+0x152>
 5d4:	81 cf       	rjmp	.-254    	; 0x4d8 <_Z18everySecondRoutinev+0x54>
 5d6:	82 cf       	rjmp	.-252    	; 0x4dc <_Z18everySecondRoutinev+0x58>
		//	LCD_write_english_string(20, 4, buf2);
			}
									
		count = 0;
	}
}
 5d8:	2a 96       	adiw	r28, 0x0a	; 10
 5da:	0f b6       	in	r0, 0x3f	; 63
 5dc:	f8 94       	cli
 5de:	de bf       	out	0x3e, r29	; 62
 5e0:	0f be       	out	0x3f, r0	; 63
 5e2:	cd bf       	out	0x3d, r28	; 61
 5e4:	df 91       	pop	r29
 5e6:	cf 91       	pop	r28
 5e8:	1f 91       	pop	r17
 5ea:	0f 91       	pop	r16
 5ec:	08 95       	ret

000005ee <main>:



int main(void)
{
	LCD_init();
 5ee:	6e de       	rcall	.-804    	; 0x2cc <_Z8LCD_initv>
	
	DDRA |= (1 << PINA7); // OUTPUTs: LED, Fan, LCD back light pins
 5f0:	d7 9a       	sbi	0x1a, 7	; 26
	PORTB |= (1 << PINB2); // High reading button
 5f2:	c2 9a       	sbi	0x18, 2	; 24
	
	
	// setting 1s timer
	TCCR1B|=( (1<<WGM12)|(1<<CS11)|(1<<CS10) ); // WGM Mode, Prescaler is set to 64
 5f4:	8e b5       	in	r24, 0x2e	; 46
 5f6:	8b 60       	ori	r24, 0x0B	; 11
 5f8:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 1875; // 187500 = 1 sec, 1875 = 0,01 sec
 5fa:	83 e5       	ldi	r24, 0x53	; 83
 5fc:	97 e0       	ldi	r25, 0x07	; 7
 5fe:	9b bd       	out	0x2b, r25	; 43
 600:	8a bd       	out	0x2a, r24	; 42
	TIMSK1 |=  (1<<OCIE1A);
 602:	61 9a       	sbi	0x0c, 1	; 12
	
	MCUCR|= (1 << ISC01) | (1 << ISC00); // Button trigers on raise
 604:	85 b7       	in	r24, 0x35	; 53
 606:	83 60       	ori	r24, 0x03	; 3
 608:	85 bf       	out	0x35, r24	; 53
	
	wdt_reset(); // Watch dog reset
 60a:	a8 95       	wdr
				: "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
						_BV(WDE) | (value & 0x07)) )
				: "r0"
		);
 60c:	9e e0       	ldi	r25, 0x0E	; 14
 60e:	88 e1       	ldi	r24, 0x18	; 24
 610:	0f b6       	in	r0, 0x3f	; 63
 612:	f8 94       	cli
 614:	a8 95       	wdr
 616:	81 bd       	out	0x21, r24	; 33
 618:	0f be       	out	0x3f, r0	; 63
 61a:	91 bd       	out	0x21, r25	; 33
	wdt_enable(WDTO_1S); // WD enable with 1s prescaler
	WDTCSR |= (1 << WDIE); // WD interrupt enable
 61c:	81 b5       	in	r24, 0x21	; 33
 61e:	80 64       	ori	r24, 0x40	; 64
 620:	81 bd       	out	0x21, r24	; 33
		
	sei();
 622:	78 94       	sei
	
	// Button interruption
	
	PCMSK0 |= (1 << PCINT0);
 624:	90 9a       	sbi	0x12, 0	; 18
	GIMSK |= (1 << INT0) | (1 << PCIE0);
 626:	8b b7       	in	r24, 0x3b	; 59
 628:	80 65       	ori	r24, 0x50	; 80
 62a:	8b bf       	out	0x3b, r24	; 59
	GIFR |= 1<<PCIF0;
 62c:	8a b7       	in	r24, 0x3a	; 58
 62e:	80 61       	ori	r24, 0x10	; 16
 630:	8a bf       	out	0x3a, r24	; 58
	
	PORTA |= 1 << PINA7; // Back Light ON
 632:	df 9a       	sbi	0x1b, 7	; 27
	
	sleepRoutine(); // sleep after start up
 634:	da de       	rcall	.-588    	; 0x3ea <_Z12sleepRoutinev>
 636:	ff cf       	rjmp	.-2      	; 0x636 <main+0x48>

00000638 <__vector_6>:
    }
	
}

ISR(TIM1_COMPA_vect)
{
 638:	1f 92       	push	r1
 63a:	0f 92       	push	r0
 63c:	0f b6       	in	r0, 0x3f	; 63
 63e:	0f 92       	push	r0
 640:	11 24       	eor	r1, r1
 642:	2f 93       	push	r18
 644:	3f 93       	push	r19
 646:	4f 93       	push	r20
 648:	5f 93       	push	r21
 64a:	6f 93       	push	r22
 64c:	7f 93       	push	r23
 64e:	8f 93       	push	r24
 650:	9f 93       	push	r25
 652:	af 93       	push	r26
 654:	bf 93       	push	r27
 656:	ef 93       	push	r30
 658:	ff 93       	push	r31
	//CPU Jumps here every 1 sec exactly!
	cli();
 65a:	f8 94       	cli
	
	timerPrescaler++;
 65c:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <timerPrescaler>
 660:	8f 5f       	subi	r24, 0xFF	; 255
 662:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <timerPrescaler>
	
	if (timerPrescaler >= 99){ 
 666:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <timerPrescaler>
 66a:	83 36       	cpi	r24, 0x63	; 99
 66c:	a0 f0       	brcs	.+40     	; 0x696 <__vector_6+0x5e>
		
		sec++;
 66e:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <sec>
 672:	8f 5f       	subi	r24, 0xFF	; 255
 674:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <sec>
		if (sec == 245) sec = 5;
 678:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <sec>
 67c:	85 3f       	cpi	r24, 0xF5	; 245
 67e:	19 f4       	brne	.+6      	; 0x686 <__vector_6+0x4e>
 680:	85 e0       	ldi	r24, 0x05	; 5
 682:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <sec>
		timerPrescaler = 0;
 686:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <timerPrescaler>
		if (idle >= 60)	sleepRoutine();		// sleep routine			
 68a:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <idle>
 68e:	8c 33       	cpi	r24, 0x3C	; 60
 690:	08 f0       	brcs	.+2      	; 0x694 <__vector_6+0x5c>
 692:	ab de       	rcall	.-682    	; 0x3ea <_Z12sleepRoutinev>
		everySecondRoutine();
 694:	f7 de       	rcall	.-530    	; 0x484 <_Z18everySecondRoutinev>
		
	}
	
	sei();
 696:	78 94       	sei
}
 698:	ff 91       	pop	r31
 69a:	ef 91       	pop	r30
 69c:	bf 91       	pop	r27
 69e:	af 91       	pop	r26
 6a0:	9f 91       	pop	r25
 6a2:	8f 91       	pop	r24
 6a4:	7f 91       	pop	r23
 6a6:	6f 91       	pop	r22
 6a8:	5f 91       	pop	r21
 6aa:	4f 91       	pop	r20
 6ac:	3f 91       	pop	r19
 6ae:	2f 91       	pop	r18
 6b0:	0f 90       	pop	r0
 6b2:	0f be       	out	0x3f, r0	; 63
 6b4:	0f 90       	pop	r0
 6b6:	1f 90       	pop	r1
 6b8:	18 95       	reti

000006ba <__vector_2>:

ISR(PCINT0_vect)
{
 6ba:	1f 92       	push	r1
 6bc:	0f 92       	push	r0
 6be:	0f b6       	in	r0, 0x3f	; 63
 6c0:	0f 92       	push	r0
 6c2:	11 24       	eor	r1, r1
 6c4:	8f 93       	push	r24
 6c6:	9f 93       	push	r25
	//counts interrupts
	count++;
 6c8:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <__data_end>
 6cc:	90 91 b3 00 	lds	r25, 0x00B3	; 0x8000b3 <__data_end+0x1>
 6d0:	01 96       	adiw	r24, 0x01	; 1
 6d2:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__data_end+0x1>
 6d6:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__data_end>
	
}
 6da:	9f 91       	pop	r25
 6dc:	8f 91       	pop	r24
 6de:	0f 90       	pop	r0
 6e0:	0f be       	out	0x3f, r0	; 63
 6e2:	0f 90       	pop	r0
 6e4:	1f 90       	pop	r1
 6e6:	18 95       	reti

000006e8 <__vector_4>:

ISR (WDT_vect) {
 6e8:	1f 92       	push	r1
 6ea:	0f 92       	push	r0
 6ec:	0f b6       	in	r0, 0x3f	; 63
 6ee:	0f 92       	push	r0
 6f0:	11 24       	eor	r1, r1
 6f2:	8f 93       	push	r24
	
	WDTCSR |= (1 << WDIE); // WD interrupt enable - reseting WD
 6f4:	81 b5       	in	r24, 0x21	; 33
 6f6:	80 64       	ori	r24, 0x40	; 64
 6f8:	81 bd       	out	0x21, r24	; 33
}
 6fa:	8f 91       	pop	r24
 6fc:	0f 90       	pop	r0
 6fe:	0f be       	out	0x3f, r0	; 63
 700:	0f 90       	pop	r0
 702:	1f 90       	pop	r1
 704:	18 95       	reti

00000706 <__vector_1>:


ISR (EXT_INT0_vect){
 706:	1f 92       	push	r1
 708:	0f 92       	push	r0
 70a:	0f b6       	in	r0, 0x3f	; 63
 70c:	0f 92       	push	r0
 70e:	11 24       	eor	r1, r1
 710:	2f 93       	push	r18
 712:	3f 93       	push	r19
 714:	4f 93       	push	r20
 716:	5f 93       	push	r21
 718:	6f 93       	push	r22
 71a:	7f 93       	push	r23
 71c:	8f 93       	push	r24
 71e:	9f 93       	push	r25
 720:	af 93       	push	r26
 722:	bf 93       	push	r27
 724:	ef 93       	push	r30
 726:	ff 93       	push	r31
	
	cli();
 728:	f8 94       	cli
	
	if (MCUCR & (1 << SE)) wakeUpRoutine(); // if OFF, turns OFF
 72a:	05 b6       	in	r0, 0x35	; 53
 72c:	05 fe       	sbrs	r0, 5
 72e:	02 c0       	rjmp	.+4      	; 0x734 <__vector_1+0x2e>
 730:	7b de       	rcall	.-778    	; 0x428 <_Z13wakeUpRoutinev>
 732:	07 c0       	rjmp	.+14     	; 0x742 <__vector_1+0x3c>
	else if ((!(MCUCR & (1 << SE))) && sec >= 3) sleepRoutine(); // if ON, turns OFF
 734:	05 b6       	in	r0, 0x35	; 53
 736:	05 fc       	sbrc	r0, 5
 738:	04 c0       	rjmp	.+8      	; 0x742 <__vector_1+0x3c>
 73a:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <sec>
 73e:	83 30       	cpi	r24, 0x03	; 3
 740:	10 f4       	brcc	.+4      	; 0x746 <__vector_1+0x40>
	
	sei();
 742:	78 94       	sei
}
 744:	02 c0       	rjmp	.+4      	; 0x74a <__vector_1+0x44>
ISR (EXT_INT0_vect){
	
	cli();
	
	if (MCUCR & (1 << SE)) wakeUpRoutine(); // if OFF, turns OFF
	else if ((!(MCUCR & (1 << SE))) && sec >= 3) sleepRoutine(); // if ON, turns OFF
 746:	51 de       	rcall	.-862    	; 0x3ea <_Z12sleepRoutinev>
 748:	fc cf       	rjmp	.-8      	; 0x742 <__vector_1+0x3c>
	
	sei();
}
 74a:	ff 91       	pop	r31
 74c:	ef 91       	pop	r30
 74e:	bf 91       	pop	r27
 750:	af 91       	pop	r26
 752:	9f 91       	pop	r25
 754:	8f 91       	pop	r24
 756:	7f 91       	pop	r23
 758:	6f 91       	pop	r22
 75a:	5f 91       	pop	r21
 75c:	4f 91       	pop	r20
 75e:	3f 91       	pop	r19
 760:	2f 91       	pop	r18
 762:	0f 90       	pop	r0
 764:	0f be       	out	0x3f, r0	; 63
 766:	0f 90       	pop	r0
 768:	1f 90       	pop	r1
 76a:	18 95       	reti

0000076c <__udivmodhi4>:
 76c:	aa 1b       	sub	r26, r26
 76e:	bb 1b       	sub	r27, r27
 770:	51 e1       	ldi	r21, 0x11	; 17
 772:	07 c0       	rjmp	.+14     	; 0x782 <__udivmodhi4_ep>

00000774 <__udivmodhi4_loop>:
 774:	aa 1f       	adc	r26, r26
 776:	bb 1f       	adc	r27, r27
 778:	a6 17       	cp	r26, r22
 77a:	b7 07       	cpc	r27, r23
 77c:	10 f0       	brcs	.+4      	; 0x782 <__udivmodhi4_ep>
 77e:	a6 1b       	sub	r26, r22
 780:	b7 0b       	sbc	r27, r23

00000782 <__udivmodhi4_ep>:
 782:	88 1f       	adc	r24, r24
 784:	99 1f       	adc	r25, r25
 786:	5a 95       	dec	r21
 788:	a9 f7       	brne	.-22     	; 0x774 <__udivmodhi4_loop>
 78a:	80 95       	com	r24
 78c:	90 95       	com	r25
 78e:	bc 01       	movw	r22, r24
 790:	cd 01       	movw	r24, r26
 792:	08 95       	ret

00000794 <memcpy>:
 794:	fb 01       	movw	r30, r22
 796:	dc 01       	movw	r26, r24
 798:	02 c0       	rjmp	.+4      	; 0x79e <memcpy+0xa>
 79a:	01 90       	ld	r0, Z+
 79c:	0d 92       	st	X+, r0
 79e:	41 50       	subi	r20, 0x01	; 1
 7a0:	50 40       	sbci	r21, 0x00	; 0
 7a2:	d8 f7       	brcc	.-10     	; 0x79a <memcpy+0x6>
 7a4:	08 95       	ret

000007a6 <_exit>:
 7a6:	f8 94       	cli

000007a8 <__stop_program>:
 7a8:	ff cf       	rjmp	.-2      	; 0x7a8 <__stop_program>
